# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class TransactionControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.transaction
    @response_catcher = @controller.http_call_back
  end

  # This endpoint allows querying last 48 hours of transaction data of Shell Card (i.e. Priced, Billed, Unbilled etc. sales items). It provides a flexible search criteria and supports pagination. E.g., if the request is made at 08:30 AM on 18 Aug 2022 then transactions until 16 Aug 2022 08:30 AM (including) can be retrieved.
  #
  #
  ##### Supported operations
  #
  #    * Search by Date and Time range (within the last 48 hours only)
  #
  #    * Search by Payer and/or Account number
  #
  #    * Search by Card
  #
  #    * Search by Purchased Country
  #
  #    * Search by Transaction posting date
  #
  #    * Search by Driver Name or Vehicle registration number
  #
  #    * Search by Fuel only transactions
  #
  #    * Search by Product and/or Product group
  def test_recent_transactions_new
    # Parameters for the API call
    request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
    body = RecentTransactionRequest.from_hash(APIHelper.json_deserialize(
      '{"PageSize":1,"Page":1,"Filters":{"ColCoCode":14,"PayerNumber":"GB00001'\
      '232","AccountNumber":"GB00001233","ProductCode":"22","PurchasedInCountr'\
      'y":"GB","CardPAN":"700205******890645","FromDateTime":"2020-11-09 13:56'\
      ':03.000","ToDateTime":"2020-12-09 13:56:03.000","TransactionStatus":"AP'\
      'PROVED","FuelOnly":"False","ProductGroupName":"Motor gasoline","Vehicle'\
      'RegistrationNumber":"YG67OUM","IncludeDeclines":true,"CardIssuerName":"'\
      'Mathew","ColumnList":"PayerNumber,AccountNumber,ProductName,FuelVolume,'\
      'PAN"}}', false))

    # Perform the API call through the SDK function
    result = @controller.recent_transactions_new(request_id, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"RequestId":"9d2dee33-7803-485a-a2b1-2c7538e597ee","Status":"SUCCESS",'\
      '"Page":1,"RowCount":2,"TotalPages":1,"Data":[{"ColCoCode":84,"PayerNumb'\
      'er":"MY00200653","AccountNumber":"MY00200653","CardIssueNumber":"1","Co'\
      'llectingCompanyCurrencyCode":"MYR","CustDataCustomerEntered":"PartnerId'\
      '","CustDataDriverId":"D123","CustDataFleetDescription":"Fleet-Truck","F'\
      'leetIdInput":"AS2344","Amount":62.47,"EuroshellSiteNumber":"1231","Inco'\
      'mingProductCode":"10","ProductCode":"23","ProductName":"Unleaded - Low '\
      'octane","SiteCode":3350,"HostingCollectingCompanyName":"Shell Malaysia '\
      'Trading Sdn Bhd","HostingCollectingCompanyNumber":"84","IccdataTranType'\
      'Code":"1","TransactionType":"Transaction Type description","Latitude":"'\
      '52.143814","Longitude":"101.72869","MerchantCategory":"5542","MerchantC'\
      'ategoryDescription":"Description","PurchasedInCountry":"MY","MerchantId'\
      '":"MY1737000000000","SiteName":"ShellPT3895 BATU 4    KUALA LUMPUR MY",'\
      '"Network":"458","DelcoCode":"084","OdometerInput":"201620","OdometerRea'\
      'dingKm":"201620","OdometerReadingMiles":"201620","CardPAN":"700214*****'\
      '**780061","PINIndicator":"Y","POIReceiptNumber":"417662","ProductsCodeA'\
      'dditional":"Additional Code","ProductsTaxCode":"0","FuelVolume":34.15,"'\
      'SfgwCardDateOfExpiry":"2024-12","SiteCurrencyISOCode":"MYR","CardId":"3'\
      '30743","TransactionDate":"2021-11-11","TransactionDateTime":"2021-11-11'\
      ' 16:32:09.000","TransactionId":"864220307","TransactionStatus":"Approve'\
      'd","UnitOfMeasure":"L","VehicleRegistrationNumber":"WD33637","NetworkDe'\
      'lcoName":"Shell Malaysia Trading Sdn Bhd","ProductGroupName":"Motor gas'\
      'oline","FuelProduct":"All Fuels","AccountCustomerName":"WCT BERHAD","Pa'\
      'yerName":"WCT BERHAD","TransactionTime":"2021-11-11","TransactionCurren'\
      'cy":"RM","UnitPrice":0.02050073206442167,"AuthorisedFlag":"Y","Transact'\
      'ionTimeGMT":"08:41:02","ReasonCode":"10","IssuerActionCode":"2","Issuer'\
      'ActionCodeDescription":"Approved, partial","DeclinedReason":"partial","'\
      'CardStatusReasonDescription":"Approved, partial","TransactionCountry":"'\
      '458","IssuingCollectingCompanyName":"Partner Name","CardIssuerName":"Jo'\
      'hn","DriverName":"PAK PAK","BearerDescription":"Description","CardCateg'\
      'oryDescription":"Driver Card","CardTypeDescription":"SHELL FLEET- HONG '\
      'KONG 7002821","CardTokenTypeDescription":"HK FLE NAT SIN R1 - CHIP","Em'\
      'bossType":"Driver","EVPrintedNumber":"NL-TNM-C00122045-K","IsRFID":fals'\
      'e}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This API allows querying transaction data (i.e. Priced, Billed and Unbilled sales items). It provides a flexible search criteria and supports paging. 
  #The version 2 is an enhancement to the version 1 where EV transactions and their details are added in the response. 
  #
  #Transactions that are posted but not yet priced, billed or that are in error will not be returned by this API. The API also supports returning Fee Items.
  #
  ##### Supported operations
  #  * Get sales items and fee transactions
  #    * Search by invoice status
  #    * Search by fixed date period
  #    * Search by date range
  #    * Search by account
  #    * Search by card
  #  * Get sales items only
  #    * Search by transaction Id or location
  #    * Search by transaction posting date
  #    * Search by invoice number or date
  #    * Search by driver name or vehicle registration number
  #    * Search by card group
  #    * Search by fuel only transactions
  #    * Search by product
  # * EV transaction details - Below are EV specific parameters
  #    * EVOperator
  #    * EVSerialId
  #    * EVChargePointSerial
  #    * EVChargePointConnectorType
  #    * EVChargePointConnectorTypeDescription
  #    * EVChargeDuration
  #    * EVChargeStartDate
  #    * EVChargeStartTime
  #    * EVChargeEndDate
  #    * EVChargeEndTime
  def test_priced_transactions_v2
    # Parameters for the API call
    request_id = '2b0cbe11-f109-4c43-9201-49af0370df1c'
    body = PricedTransactionRequestV2.from_hash(APIHelper.json_deserialize(
      '{"PageSize":1,"Page":1,"Filters":{"ColCoCode":"032","InvoiceStatus":"A"'\
      ',"PayerNumber":"DE26685263","AccountId":29484,"AccountNumber":"DE266670'\
      '80","DriverName":"HH NX 508","CardGroupId":40000,"CardPAN":"70020510066'\
      '29890645","ProductCode":"10","ProductName":"Diesel AGO","SiteCode":"050'\
      '00100","IncomingSiteNumber":"100021","InvoiceDate":"2021-01-01","Invoic'\
      'eNumber":"3201016193","PurchasedInCountryCode":"GB","PurchasedInCountry'\
      '":"United Kingdom","SiteGroupId":202,"VehicleRegistrationNumber":"4K468'\
      '01","FeeTypeId":275549,"LineItemDescription":"ABC3","Cards":[0],"SortOr'\
      'der":"5","FromDate":"2022-01-01 00:00:00","ToDate":"2022-01-01 00:00:00'\
      '","Period":3,"PostingDateFrom":"2022-01-01 00:00:00","PostingDateTo":"2'\
      '022-01-01 00:00:00","TransactionItemId":"1208176398","FuelOnly":false,"'\
      'IncludeFees":true,"IsMultipayer":true,"ValidInvoiceDateOnly":false,"Inv'\
      'oiceFromDate":"2022-01-01 00:00:00","InvoiceToDate":"2022-01-01 00:00:0'\
      '0","HostingCollectingCompanyNumber":"032","Search":"2K89909","Transacti'\
      'onId":"io9KVXk1UkW57XWKyeaHHg"}}', false))

    # Perform the API call through the SDK function
    result = @controller.priced_transactions_v2(request_id, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"RequestId":"9d2dee33-7803-485a-a2b1-2c7538e597ee","Status":"SUCCESS",'\
      '"Data":[{"AccountName":"Blue Colour Ltd","AccountId":29484,"AccountNumb'\
      'er":"DE26667080","AccountShortName":"Mathew","Additional1":"GBALLEGO000'\
      '2452","Additional2":"GBALLEGO0002452","Additional3":"GBALLEGO0002452","'\
      'Additional4":"GBALLEGO0002452","AllowClearing":"Null","AuthorisationCod'\
      'e":300796,"TransactionStatus":"Y","DriverName":"SATTY BHAMRA","CardExpi'\
      'ryPeriod":2204,"CardExpiry":"20220101","CardGroupId":40000,"CardGroupNa'\
      'me":"006240 FIRE BRIGHT SOLUTIONS","IssuerCode":7002,"CardPAN":"7002053'\
      '465789891000","ReleaseCode":9,"CardSequenceNumber":617,"CardType":"GB S'\
      'TD FLT NAT SINGLE R9","ColCoCode":"014","UnitDiscountInvoiceCurrency":-'\
      '0.0051,"ColCoExchangeRate":0.851858,"InvoiceCurrencySymbol":"GBP","Corr'\
      'ectionFlag":true,"CRMNumber":10,"CustomerCountry":"United Kingdom","Cus'\
      'tomerCurrencyCode":"GBP","CustomerCurrencySymbol":"Â£","RebateonNetAmoun'\
      'tInCustomerCurrency":0,"EffectiveDiscountInCustomerCurrency":-0.22,"Eff'\
      'ectiveUnitDiscountInCustomerCurrency":-0.0051,"UnitPriceInInvoiceCurren'\
      'cy":1.1024,"InvoiceTax":0,"InvoiceGrossAmount":57.25,"InvoiceNetAmount"'\
      ':47.71,"VATonNetAmountInCustomerCurrency":9.54,"CustomerRetailPriceUnit'\
      'Gross":0,"CustomerRetailValueTotalGross":57.52,"CustomerRetailValueTota'\
      'lNet":47.93,"TransactionTypeDescription":9.59,"RebateonNetAmountInTrans'\
      'actionCurrency":-0.22,"EffectiveDiscountInTrxCurrency":-0.22,"DelCoToCo'\
      'lCoExchangeRate":0,"Cards":[275549],"UnitDiscountTransactionCurrency":-'\
      '0.005,"TransactionGrossAmount":57.25,"TransactionNetAmount":47.71,"Tran'\
      'sactionTax":9.54,"VATonNetAmount":9.54,"DelcoListPriceUnitNet":0,"Delco'\
      'RetailPriceUnitGross":1.32888,"UnitPriceInTransactionCurrency":1.1074,"'\
      'DelcoRetailPriceUnitNet":1.1074,"DelcoRetailValueTotalGross":57.52,"Del'\
      'coRetailValueTotalNet":47.93,"TransactionCurrencySymbol":"$","DiscountT'\
      'ype":"Retail","DisputeStatus":false,"IsShellSite":false,"FleetIdInput":'\
      '"YG67OUM","IncomingProductCode":23,"PostingDate":"20210802","PostingTim'\
      'e":"14:15:22","ProductCode":30,"ProductName":"Unleaded - Medium octane"'\
      ',"ProductGroupId":22,"IncomingCurrencyCode":"GBP","IncomingSiteDescript'\
      'ion":"Shell Broadway Ring","Location":"Shell Broadway Ring","SiteName":'\
      '"Shell Broadway Ring","SiteCode":32,"IncomingSiteNumber":15,"InvoiceCur'\
      'rencyCode":"GBP","InvoiceDate":"20210802","InvoiceNumber":3201016193,"F'\
      'uelProduct":true,"VATApplicable":"Y","PayerName":"Colours Services Ltd"'\
      ',"PayerNumber":"GB12121212","ParentCustomerNumber":"GB12121212","PayerG'\
      'roup":"H312066","PayerGroupName":"12162566 - FUEL CARD SERVICE","CheckD'\
      'igit":6,"NetInvoiceIndicator":"Y","DelcoCode":5,"NetworkCode":3,"Purcha'\
      'sedInCountry":"United Kingdom","SiteCountry":"United Kingdom","VATCount'\
      'ry":"United Kingdom","DelcoName":"Shell U.K. Oil Products Limited","Net'\
      'work":"Shell","OdometerInput":0,"OriginalSalesItemId":"Null","FleetIDDe'\
      'scription":"YG67OUM","ParentCustomerId":6494,"PINIndicator":"Y, N","Pro'\
      'ductGroupName":"Fees","PurchasedInCountryCode":"GB","Quantity":43.28,"R'\
      'ebateRate":0.0022,"ReceiptNumber":6803,"RefundFlag":"Y","SiteGroupId":2'\
      '02,"SiteGroupName":"CZ 9100 ECONOMY NETWORK","Latitude":53.83606,"Longi'\
      'tude":-1.61854,"DelCoExchangeRate":0.851858,"EuroRebateAmount":-0.25825'\
      '9,"NetEuroAmount":56.01,"EuroVATAmount":11.2,"ParentCustomerName":"FUEL'\
      ' CARD SERVICES LTD","IsInvoiced":false,"TransactionCurrencyCode":"GBP",'\
      '"CreditDebitCode":"D or C","TransactionDate":"20210801","TransactionTim'\
      'e":"12:16:58","TransactionItemId":"H305908971030","TrnIdentifier":"H305'\
      '908971030","Type":"SALE","TransactionLine":1,"TransactionType":"Purchas'\
      'e","UTCOffset":"Europe/London","VATCategory":"United Kingdom Standard V'\
      'AT Rate","VATRate":0.2,"VehicleRegistration":"YG67OUM","IsCancelled":"Y'\
      '","ColCoGrossAmount":57.25,"ColCoNetAmount":47.71,"ColCoVATAmount":9.54'\
      ',"OriginalCurrencySymbol":"$","OriginalCurrencyCode":"$","OriginalVATAm'\
      'ount":0,"EmbossText":"PARKLANE PROPERTIES LTD","OriginalExchangeRate":0'\
      ',"OriginalTransactionItemInvoiceDate":"20220202","FeeTypeId":1,"LineIte'\
      'mDescription":true,"FeeRuleDescription":"Simple Fee","Frequency":1,"Fee'\
      'RuleId":1,"SystemEntryDate":"20210828","SystemEntryTime":"20:21:08","Is'\
      'Manual":"Y","OriginalTransactionItemId":"Y","OriginalTransactionItemInv'\
      'oiceNumber":6750802,"OriginalTransactionItemInvoiceId":234,"PayerShortN'\
      'ame":"FUEL CARD SERVICES LTD","ReverseCharge":"Y","OriginalGrossAmount"'\
      ':57.25,"OriginalNetAmount":57.25,"UnitOfMeasure":"L","RoadType":"Nation'\
      'al Road","CustomerCountryIsoCode":"DE","EVOperator":"Shell Recharge","E'\
      'VSerialId":"GBALLEGO0002452","EVChargePointSerial":"GBALLEGO0002452","E'\
      'VChargePointConnectorType":5,"EVChargePointConnectorTypeDescription":"D'\
      'C 50 kW","EVChargeDuration":"PT3205S","EVChargeStartDate":"2021-08-01",'\
      '"EVChargeStartTime":"20:08:01","EVChargeEndDate":"2022-08-01","EVCharge'\
      'EndTime":"20:08:01","HostingCollectingCompanyNumber":0,"TransactionId":'\
      '0,"FuelOnly":true}],"Page":3,"PageSize":30,"TotalPages":5}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end