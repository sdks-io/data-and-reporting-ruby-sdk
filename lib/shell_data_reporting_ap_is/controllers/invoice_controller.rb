# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # InvoiceController
  class InvoiceController < BaseController
    # This API allows to search invoice data in the Shell Card Platform. It
    # provides flexible search criteria in the request body and supports paging.
    # This API will also query the relevant invoice documents list and return a
    # reference number that can be used to download invoice documents (PDF and
    # Proofing elements in a zip file).
    # #### Supported operations
    #   * Search invoices by account
    #   * Search invoices by invoice type or invoice status
    #   * Search invoices by invoice id or number
    #   * Search invoices by invoiced country
    #   * Search invoices including einvoices
    #   * Search invoices by summary document
    #   * Search invoices by statement of account
    #   * Search invoices by fixed and custom date periods
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [InvoiceSearchRequest] body Optional parameter: Invoice Search
    # RequestBody
    # @return [InvoiceSearchResponse] response from the API call.
    def invoice_search(request_id,
                       body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/search',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(InvoiceSearchResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Search400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Search401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Search403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Search404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Search500ErrorException))
        .execute
    end

    # This API returns the high level summary of invoices that match the  given
    # search criteria. The same search criteria as the endpoint
    # `/v1/invoice/search` is supported with the exception of paging related
    # parameters.
    # #### Supported operations
    #   * Search invoices by account
    #   * Search invoices by invoice type or invoice status
    #   * Search invoices by invoice id or number
    #   * Search invoices by invoiced country
    #   * Search invoices including einvoices
    #   * Search invoices by summary document
    #   * Search invoices by statement of account
    #   * Search invoices by fixed and custom date periods
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [InvoiceSummaryRequest] body Optional parameter: Invoice Search
    # RequestBody
    # @return [InvoiceSummaryResponse] response from the API call.
    def invoice_summary(request_id,
                        body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/summary',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(InvoiceSummaryResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Summary400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Summary401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Summary403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Summary404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Summary500ErrorException))
        .execute
    end

    # This API allows querying the details of the latest statement of account
    # (SOA) generated for a given Payer.
    # The endpoint supports querying SOA documents by various input parameters
    # specified in the request body.
    # #### Supported operations
    #   * Search invoice SOA by payer and account
    #   * Search invoice SOA including monthly trend (last 13 months invocie
    # trend summary)
    #   * Search invoice SOA including past SOAs
    #   * Search invoice SOA including due/overdue documents
    #   * Search invoice SOA including invoice summary
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [StatementOfAccountRequest] body Optional parameter:
    # StatementOfAccount RequestBody
    # @return [StatementOfAccountResponse] response from the API call.
    def statement_of_account(request_id,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/statementofaccount',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(StatementOfAccountResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Statementofaccount400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Statementofaccount401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Statementofaccount403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Statementofaccount404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Statementofaccount500ErrorException))
        .execute
    end

    # - This API will return the list of Invoice Dates and Numbers for the given
    # date range. If the dates are not provided then it will fetch the data for
    # past 13 months.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [InvoiceDatesRequest] body Optional parameter: StatementOfAccount
    # RequestBody
    # @return [InvoiceDatesResponseData] response from the API call.
    def dates(request_id,
              body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/dates',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(InvoiceDatesResponseData.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Dates400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Dates401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Dates403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Dates404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Dates500ErrorException))
        .execute
    end

    # - This API will allow querying of SOA from different systems
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [SearchStatementOfAccountRequest] body Optional parameter:
    # searchstatementofaccount RequestBody
    # @return [SearchStatementOfAccountResponse] response from the API call.
    def search_statement_of_account(request_id,
                                    body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/searchstatementofaccount',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SearchStatementOfAccountResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Searchstatementofaccount400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Searchstatementofaccount401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Searchstatementofaccount403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Searchstatementofaccount404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Searchstatementofaccount500ErrorException))
        .execute
    end

    # - This API allows querying the details of all invoices successfully
    # uploaded to the Worldline invoice repository and file reference numbers
    # for downloading.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [SearchDocumentsRequest] body Optional parameter: SearchDocuments
    # RequestBody
    # @return [SearchDocumentsResponse] response from the API call.
    def search_documents(request_id,
                         body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/searchdocuments',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SearchDocumentsResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Searchdocuments400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Searchdocuments401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Searchdocuments403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Searchdocuments404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Searchdocuments500ErrorException))
        .execute
    end

    # - This API provides the functionality needed for the screen “EID FILES” in
    # the web interface. It allows retrieving a list of EIDs based on search
    # criteria.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [EIDSearchRequest] body Optional parameter: EIDSearch RequestBody
    # @return [EIDDocumentResponse] response from the API call.
    def eid_search(request_id,
                   body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/eidsearch',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(EIDDocumentResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Eidsearch400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Eidsearch401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Eidsearch403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Eidsearch404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Eidsearch500ErrorException))
        .execute
    end

    # - This API downloads Invoice Documents i.e., ZIP file with Invoice PDF
    # file and Proofing Elements in XML format from invoice repository.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [InvoiceDownloadRequest] body Optional parameter: Invoice Download
    # RequestBody
    # @return [Binary] response from the API call.
    def download(request_id,
                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/download',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Download400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Download401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Download403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Download404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Download500ErrorException))
        .execute
    end

    # - This service allows downloading one or more EID documents and the
    # corresponding signature material (where applicable) in one single request
    # - The number of EID that can be downloaded at once is limited to 100
    # documents.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [EIDDownloadRequest] body Optional parameter: EIDInvoice Download
    # RequestBody
    # @return [Binary] response from the API call.
    def eid_download(request_id,
                     body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/invoice-management/v1/eiddownload',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 InvoiceManagementV1Eiddownload400ErrorException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid '\
                                  ' authentication credentials for the target resource.',
                                 InvoiceManagementV1Eiddownload401ErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 InvoiceManagementV1Eiddownload403ErrorException)
                    .local_error('404',
                                 'The origin server did not find a current representation  for'\
                                  ' the target resource or is not willing to disclose  that one'\
                                  ' exists.',
                                 InvoiceManagementV1Eiddownload404ErrorException)
                    .local_error('500',
                                 'The server encountered an unexpected condition that  prevented'\
                                  ' it from fulfilling the request.',
                                 InvoiceManagementV1Eiddownload500ErrorException))
        .execute
    end
  end
end
