# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # TransactionController
  class TransactionController < BaseController
    # This API allows querying transaction data (i.e. Priced, Billed and
    # Unbilled sales items). It provides a flexible search criteria and supports
    # paging.
    # Transactions that are posted but not yet priced, billed or that are in
    # error will not be returned by this API. The API also supports returning
    # Fee Items.
    # #### Supported operations
    #   * Get sales items and fee transactions
    #     * Search by invoice status
    #     * Search by fixed date period
    #     * Search by date range
    #     * Search by account
    #     * Search by card
    #   * Get sales items only
    #     * Search by transaction Id or location
    #     * Search by transaction posting date
    #     * Search by invoice number or date
    #     * Search by driver name or vehicle registration number
    #     * Search by card group
    #     * Search by fuel only transactions
    #     * Search by product
    # 
    #  This API fetches transactions for a period based on the below parameters
    # and priority order:
    # 1.	InvoiceNumber
    #  2.	InvoiceDate
    #  3.	FromDate, ToDate
    # 4.	PostingFromDate, PostingToDate (Can be used only when IncludeFees =
    # false)
    #  5.	InvoiceDateFrom, InvoiceDateTo
    #  6.	Period
    #  This API considers only one of the above set of parameters at a time. For
    # example, if InvoiceNumber and Period are provided in the input then Period
    # is ignored and transactions associated to the given invoice number are
    # returned.
    # If none of the above parameters are provided then last 7 days transactions
    # will be fetched.
    # This operation can fetch transactions that are old up to 24 (configurable)
    # months. However, the date range between any of the ‘From’ and ‘To’ dates
    # in the above combination cannot be more than 210 (configurable) days.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [PriceTransactionRequest] body Optional parameter: Priced
    # Transaction Request Body
    # @return [PricedTransactionResponse] response from the API call
    def priced_transactions(apikey,
                            request_id,
                            body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/pricedtransactions',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PricedTransactionResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API returns the transaction summary data (i.e. Priced, Billed and
    # Unbilled sales items). It provides a flexible search criteria.
    # The API also supports returning Fee Items. Transactions posted for fee
    # items that are in error are not included in the summary.
    # The endpoint supports the exact same search criteria as the endpoint
    # *transaction/prciedtransactions*.
    # #### Supported operations
    #   * Get sales items and fee transactions
    #     * Search by invoice status
    #     * Search by fixed date period
    #     * Search by date range
    #     * Search by account
    #     * Search by card
    #   * Get sales items only
    #     * Search by transaction Id or location
    #     * Search by transaction posting date
    #     * Search by invoice number or date
    #     * Search by driver name or vehicle registration number
    #     * Search by card group
    #     * Search by fuel only transactions
    #     * Search by product
    # 
    #  This API fetches transactions for a period based on the below parameters
    # and priority order:
    #  1.	InvoiceNumber
    #  2.	InvoiceDate
    #  3.	FromDate, ToDate
    #  4.	PostingFromDate, PostingToDate (Can be used only when IncludeFees =
    # false)
    #  5.	InvoiceDateFrom, InvoiceDateTo
    #  6.	Period
    #  This API considers only one of the above set of parameters at a time. For
    # example, if InvoiceNumber and Period are provided in the input then Period
    # is ignored and transactions associated to the given invoice number are
    # returned.
    # If none of the above parameters are provided then last 7 days transactions
    # will be fetched.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [PriceTransSummaryRequest] body Optional parameter: PricedSummary
    # RequestBody
    # @return [PricedTransSummaryResponse] response from the API call
    def priced_transactions_summary(apikey,
                                    request_id,
                                    body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/pricedtransactionssummary',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PricedTransSummaryResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API allows querying transaction data (i.e. Priced, Billed and
    # Unbilled sales items) for multiple payers. It provides a flexible search
    # criteria and supports paging.
    # Transactions that are posted but not yet priced, billed or that are in
    # error will not be returned by this API. The API also supports returning
    # Fee Items.
    # At least one payer should be provided. Multiple payers must belong to the
    # same payer group.
    # #### Supported operations
    #   * Get sales items and fee transactions for multiple payers
    #     * Search by invoice status
    #     * Search by fixed date period
    #     * Search by date range
    #   * Get sales items only for multiple payers
    #     * Search by transaction location
    #     * Search by transaction posting date
    #     * Search by invoice number or date
    #     * Search by fuel only transactions
    # 
    #  This API fetches transactions for a period based on the below parameters
    # and priority order:
    #  1.	InvoiceNumber
    #  2.	InvoiceDate
    #  3.	FromDate, ToDate
    #  4.	PostingFromDate, PostingToDate (Can be used only when IncludeFees =
    # false)
    #  5.	InvoiceDateFrom, InvoiceDateTo
    #  6.	Period
    #  This API considers only one of the above set of parameters at a time. For
    # example, if InvoiceNumber and Period are provided in the input then Period
    # is ignored and transactions associated to the given invoice number are
    # returned.
    # If none of the above parameters are provided then last 7 days transactions
    # will be fetched.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [MultiPricedTransactionRequest] body Optional parameter: MultiPayer
    # RequestBody
    # @return [MultiPricedTransactionResponse] response from the API call
    def multipriced_transactions(apikey,
                                 request_id,
                                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/multipayerspricedtransactions',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(MultiPricedTransactionResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This operation is to provide the expenditure analysis for a card for the
    # past 7 months.
    # The response contains a daily summary of the transactions (billed &
    # unbilled) from 1st of the last 7 months for the requested card grouped by
    # card, site-group and product.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CardUsageSummaryRequest] body Optional parameter: Card Usage
    # Summary RequestBody
    # @return [CardUsageSummaryResponse] response from the API call
    def card_usage_summary(apikey,
                           request_id,
                           body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/cardusagesummary',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CardUsageSummaryResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This API provides the details of the bonus and/or association bonus
    # rules setup for the given payer and that are active on the current date.
    # - This API also returns the details of the monthly breakup of current
    # period consumption as well as the details of the previously calculated
    # bonus and consumption of the applicable payers.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [VolumeBasedBonusRequest] body Optional parameter: VolumeBasedBonus
    # RequestBody
    # @return [VolumeBasedBonusResponse] response from the API call
    def volume_based_bonus(apikey,
                           request_id,
                           body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/volumebasedbonus',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(VolumeBasedBonusResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This API will return the details of the in arrear fee rule applied to
    # the payer along with details of locations, products, tiers as applied.
    # - It will also show historical and current volume consumption and related
    # tier applied for the following month.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [VolumeBasedPricingRequest] body Optional parameter:
    # VolumeBasedPricing RequestBody
    # @return [VolumeBasedPricingResponse] response from the API call
    def volume_based_pricing(apikey,
                             request_id,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/volumebasedpricing',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(VolumeBasedPricingResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API returns the fee/charges levied from a  customer's account in a
    # billing period or date range. The API returns both billed and unbilled fee
    # items.
    # To get the summary of charges, the endpoint *transaction/feessummary*
    # should be called with the same input criteria.
    # #### Supported operations
    #   * Get fees by invoice status
    #   * Get fees by date period
    #   * Get fees by account
    #   * Get fees by card Id or PAN
    #   * Get fees by fee type charges
    #   * Get fees including cancelled items
    #   * Get fees by line item description
    #   * Get fees by product
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [TransactionFeesRequest] body Optional parameter: Transaction Fees
    # RequestBody
    # @return [TransactionFeesResponse] response from the API call
    def fees(apikey,
             request_id,
             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/fees',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(TransactionFeesResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API returns the summary data of the fee/charges levied from a
    # customer's account in a billing period or date range. The API returns both
    # billed and unbilled fee items.
    # The endpoint supports the exact same search criteria as the endpoint
    # *transaction/feessummary*.
    # #### Supported operations
    #   * Get fees by invoice status
    #   * Get fees by date period
    #   * Get fees by account
    #   * Get fees by card Id or PAN
    #   * Get fees by fee type charges
    #   * Get fees including cancelled items
    #   * Get fees by line item description
    #   * Get fees by product
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [TransactionFeesRequest] body Optional parameter: FeeSummary
    # RequestBody
    # @return [FeeSummaryResponse] response from the API call
    def fee_summary_response(apikey,
                             request_id,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/feessummary',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FeeSummaryResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This API returns the customer an overview of how many transactions, how
    # much fuel volume used over a given period and the total volume used by a
    # card
    # - This operation response will contains card & transaction details for
    # given period aggregated by payer, account, cardGroup, PAN, DriverName and
    # VRN
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [FuelConsumptionRequest] body Optional parameter: FuelConsumption
    # RequestBody
    # @return [FuelConsumptionResponse] response from the API call
    def fuel_consumption(apikey,
                         request_id,
                         body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/fuelconsumption',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(FuelConsumptionResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This API allows the users to update the odometer readings on the sales
    # items (transaction data)
    # - This is an asynchronous operation. If opted, the user will be notified
    # on completion of processing.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [UpdateOdometerRequest] body Optional parameter: updateOdometer
    # RequestBody
    # @return [UpdateOdometerResponse] response from the API call
    def update_odometer(apikey,
                        request_id,
                        body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/updateodometer',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UpdateOdometerResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This API provides the details of the Cards or Transaction related
    # exceptions based on the given conditions for the Requested period.
    # - This API will return the Transactions related exceptions when the
    # OutputType input parameter is passed as ‘Transaction’ else will return the
    # Cards related exceptions.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [TransactionExceptionsRequest] body Optional parameter: Transaction
    # Exceptions RequestBody
    # @return [TransactionExceptionsResponse] response from the API call
    def transaction_exceptions(apikey,
                               request_id,
                               body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/transaction/exceptions',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(TransactionExceptionsResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This endpoint allows querying last 48 hours of transaction data of Shell
    # Card (i.e. Priced, Billed, Unbilled etc. sales items). It provides a
    # flexible search criteria and supports pagination. E.g., if the request is
    # made at 08:30 AM on 18 Aug 2022 then transactions until 16 Aug 2022 08:30
    # AM (including) can be retrieved.
    # #### Supported operations
    #     * Search by Date and Time range (within the last 48 hours only)
    #     * Search by Payer and/or Account number
    #     * Search by Card
    #     * Search by Purchased Country
    #     * Search by Transaction posting date
    #     * Search by Driver Name or Vehicle registration number
    #     * Search by Fuel only transactions
    #     * Search by Product and/or Product group
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [RecentTransactionRequest] body Optional parameter: New Recent
    # Transaction RequestBody
    # @return [RecentTransactionsResponse] response from the API call
    def recent_transactions_new(request_id,
                                body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction-data/v1/recent',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(RecentTransactionsResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API allows querying transaction data (i.e. Priced, Billed and
    # Unbilled sales items). It provides a flexible search criteria and supports
    # paging.
    # The version 2 is an enhancement to the version 1 where EV transactions and
    # their details are added in the response.
    # Transactions that are posted but not yet priced, billed or that are in
    # error will not be returned by this API. The API also supports returning
    # Fee Items.
    # #### Supported operations
    #   * Get sales items and fee transactions
    #     * Search by invoice status
    #     * Search by fixed date period
    #     * Search by date range
    #     * Search by account
    #     * Search by card
    #   * Get sales items only
    #     * Search by transaction Id or location
    #     * Search by transaction posting date
    #     * Search by invoice number or date
    #     * Search by driver name or vehicle registration number
    #     * Search by card group
    #     * Search by fuel only transactions
    #     * Search by product
    #  * EV transaction details - Below are EV specific parameters
    #     * EVOperator
    #     * EVSerialId
    #     * EVChargePointSerial
    #     * EVChargePointConnectorType
    #     * EVChargePointConnectorTypeDescription
    #     * EVChargeDuration
    #     * EVChargeStartDate
    #     * EVChargeStartTime
    #     * EVChargeEndDate
    #     * EVChargeEndTime
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [PricedTransactionRequestV2] body Optional parameter: Priced
    # TransactionV2 RequestBody
    # @return [PricedTransactionResponseV2] response from the API call
    def priced_transactions_v2(request_id,
                               body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction-data/v1/priced',
                                     Server::SHELL)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PricedTransactionResponseV2.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end
  end
end
