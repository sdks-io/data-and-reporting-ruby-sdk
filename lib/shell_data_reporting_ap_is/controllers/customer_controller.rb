# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # CustomerController
  class CustomerController < BaseController
    # This API allows querying the user data of the logged in user.</br>
    # This API will return the user access details such as payers and/or
    # accounts. </br>
    # This API will also validate that logged in user has access to the
    # requested API, on failure it will return HasAPIAccess flag as false in
    # response.</br>
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [LoggedInUserRequest] body Optional parameter: Logged in user
    # request body
    # @return [LoggedInUserResponse] response from the API call
    def loggedin_user(apikey,
                      request_id,
                      body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/user/loggedinuser',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(LoggedInUserResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API allows querying the payer accounts details from the Shell Cards
    # Platform. It provides flexible search criteria for searching payer
    # information and supports paging.
    # Paging is applicable only when all the
    # payers passed in the input are from the same ColCo.
    # However, paging will
    # be ignored and the API will return all the matching data by merging the
    # data queried from each ColCo when payers passed in the input are from
    # multiple ColCos.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [PayerRequest] body Optional parameter: Serach payers request
    # body
    # @return [PayerResponse] response from the API call
    def payers(apikey,
               request_id,
               body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/customer/payers',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PayerResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API allows querying the card delivery addresses of a given account
    # from the Shell Cards Platform.
    # Only active delivery addresses will be returned.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CustomerDetailRequest] body Optional parameter: Customerdetails
    # request body
    # @return [CustomerDetailResponse] response from the API call
    def customer(apikey,
                 request_id,
                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/customer/customer',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CustomerDetailResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # - This operation fetches the International and National Price List and
    # discount values set on pump prices & List Prices
    # - It allows searching price list and discount values set on pump prices
    # that are applicable for a given customer
    # **Note**: Accounts with cancelled status will not be considered for this
    # operation for the configured
    # - When the search is based on customer specific price list then the
    # customer price list is returned based on the associated pricing customer.
    # - The discount values set on pump prices, which are returned by the
    # operation are always customer specific values based on the customer
    # associated price rules.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CustomerPriceListRequest] body Optional parameter: Customerdetails
    # request body
    # @return [CustomerPriceListResponse] response from the API call
    def customer_price_list(apikey,
                            request_id,
                            body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v2/customer/pricelist',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CustomerPriceListResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This API allows querying the customer account details from the Shell Cards
    # Platform.
    # It provides a flexible search criterion and supports paging".
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [AccountRequest] body Optional parameter: Example:
    # @return [AccountResponse] response from the API call
    def accounts(apikey,
                 request_id,
                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/customer/accounts',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This operation allows querying card types that are associated to the given
    # account and are allowed to be shown to users.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CardTypeRequest] body Optional parameter: Get CardType Request
    # Body
    # @return [CardTypeResponse] response from the API call
    def card_type(apikey,
                  request_id,
                  body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v2/customer/cardtype',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CardTypeResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This operation allows querying the card group details . It provides
    # flexible search criteria and supports paging.\
    # When the card group type is configured as ‘Vertical’ in cards platform,
    # this operation will return all card groups from the given account or if no
    # account is passed in the input, then will return card groups from all the
    # accounts under the payer.
    # When the card group type is configured as ‘Horizontal’ in cards platform,
    # this API will return all card groups configured directly under the payer.
    # Accounts with cancelled status will not be considered for cardgroups
    # search for the configured (E.g., SFH) set of client apps.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CardGroupRequest] body Optional parameter: Request Body
    # @return [CardGroupResponse] response from the API call
    def card_groups(apikey,
                    request_id,
                    body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/customer/cardgroups',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CardGroupResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end

    # This operation allows users to fetch audit data of account or card
    # operations performed by users of a given customer
    # The audit data includes details of below API operations
    # * Order Card
    # * Create Card Group
    # * PIN reminder
    # * Move Cards
    # * Update Card Status
    # * Update Card Group
    # * Auto renew
    # * Bulk card order
    # * Bulk card block
    # * Bulk Card Order (Multi Account)
    # * BCOSummary
    # * BCOMultiAccountSummary
    # * BCBSummary
    # * Mobile Payment
    # * Registration
    # * Fund Transfer (Scheduled & Realtime)
    # * Delivery Address Update.
    # @param [String] apikey Required parameter: This is the API key of the
    # specific environment which needs to be passed by the client.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [AuditRequest] body Optional parameter: request body
    # @return [AuditResponse] response from the API call
    def audit_report(apikey,
                     request_id,
                     body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/fleetmanagement/v1/customer/auditreport',
                                     Server::SHELL)
                   .header_param(new_parameter(apikey, key: 'apikey'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AuditResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request  due to'\
                                 ' something that is perceived to be a client\r\n error (e.g.,'\
                                 ' malformed request syntax, invalid \r\n request message framing,'\
                                 ' or deceptive request routing).",
                                DefaultErrorException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\r\n",
                                DefaultErrorException)
                   .local_error('403',
                                "The server understood the request but refuses to authorize it.'\
                                 '\r\n",
                                ErrorUserAccessError1Exception)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\r\n",
                                DefaultErrorException)
                   .local_error('500',
                                "The server encountered an unexpected condition the prevented it'\
                                 ' from fulfilling the request.\r\n",
                                DefaultErrorException))
        .execute
    end
  end
end
