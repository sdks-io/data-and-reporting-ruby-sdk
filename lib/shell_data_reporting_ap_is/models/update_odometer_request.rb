# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # UpdateOdometerRequest Model.
  class UpdateOdometerRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id  of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id (i.e. Customer Id of the Payment Customer in Cards Platform) of
    # the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # @return [Integer]
    attr_accessor :payer_id

    # Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected
    # account.
    # Optional if AccountNumber is passed else Mandatory
    # @return [Integer]
    attr_accessor :account_id

    # Account Number (ex: GB000000123) of the selected account.
    # Optional if AccountId is passed else Mandatory
    # @return [String]
    attr_accessor :account_number

    # Account Number (ex: GB000000123) of the selected account.
    # Optional if AccountId is passed else Mandatory
    # @return [Array[UpdateOdometer]]
    attr_accessor :update_odometers

    # True/False.
    # Optional.
    # Default: False
    # If true, the caller would be notified back with the status as success or
    # failure after the update odometer is processed.
    # @return [TrueClass | FalseClass]
    attr_accessor :notify_caller

    # The caller to be notified with the status of the update odometer.
    # Mandatory, if NotifyCaller is true.
    # @return [String]
    attr_accessor :caller

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['update_odometers'] = 'UpdateOdometers'
      @_hash['notify_caller'] = 'NotifyCaller'
      @_hash['caller'] = 'Caller'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        account_id
        account_number
        update_odometers
        notify_caller
        caller
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(col_co_id = SKIP, col_co_code = SKIP, payer_id = SKIP,
                   account_id = SKIP, account_number = SKIP,
                   update_odometers = SKIP, notify_caller = SKIP, caller = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @update_odometers = update_odometers unless update_odometers == SKIP
      @notify_caller = notify_caller unless notify_caller == SKIP
      @caller = caller unless caller == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      # Parameter is an array, so we need to iterate through it
      update_odometers = nil
      unless hash['UpdateOdometers'].nil?
        update_odometers = []
        hash['UpdateOdometers'].each do |structure|
          update_odometers << (UpdateOdometer.from_hash(structure) if structure)
        end
      end

      update_odometers = SKIP unless hash.key?('UpdateOdometers')
      notify_caller = hash.key?('NotifyCaller') ? hash['NotifyCaller'] : SKIP
      caller = hash.key?('Caller') ? hash['Caller'] : SKIP

      # Create object from extracted values.
      UpdateOdometerRequest.new(col_co_id,
                                col_co_code,
                                payer_id,
                                account_id,
                                account_number,
                                update_odometers,
                                notify_caller,
                                caller)
    end
  end
end
