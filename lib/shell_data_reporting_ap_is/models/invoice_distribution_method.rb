# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # InvoiceDistributionMethod Model.
  class InvoiceDistributionMethod < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # If True then this distribution method is the default distribution method.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_primary

    # Frequency type unit Id & description
    # E.g.:
    # 1- Daily
    # 2-Weekly
    # 3-Monthly
    # 4-Invoicing
    # 6-Calendar quarter
    # @return [String]
    attr_accessor :frequency_type

    # Invoice Distribution Method (Id-Description)
    # E.g.:
    # 1-e-mail
    # 2-Fax
    # 3-Courier to Customer
    # 4-Courier to Client
    # 5-Print
    # 6-FTP
    # 7-SMS
    # @return [String]
    attr_accessor :distribution_method

    # Invoice output type (Id - Description)
    # @return [String]
    attr_accessor :output_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['is_primary'] = 'IsPrimary'
      @_hash['frequency_type'] = 'FrequencyType'
      @_hash['distribution_method'] = 'DistributionMethod'
      @_hash['output_type'] = 'OutputType'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        is_primary
        frequency_type
        distribution_method
        output_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        frequency_type
        distribution_method
        output_type
      ]
    end

    def initialize(is_primary = true,
                   frequency_type = SKIP,
                   distribution_method = SKIP,
                   output_type = SKIP)
      @is_primary = is_primary unless is_primary == SKIP
      @frequency_type = frequency_type unless frequency_type == SKIP
      @distribution_method = distribution_method unless distribution_method == SKIP
      @output_type = output_type unless output_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      is_primary = hash['IsPrimary'] ||= true
      frequency_type = hash.key?('FrequencyType') ? hash['FrequencyType'] : SKIP
      distribution_method =
        hash.key?('DistributionMethod') ? hash['DistributionMethod'] : SKIP
      output_type = hash.key?('OutputType') ? hash['OutputType'] : SKIP

      # Create object from extracted values.
      InvoiceDistributionMethod.new(is_primary,
                                    frequency_type,
                                    distribution_method,
                                    output_type)
    end
  end
end
