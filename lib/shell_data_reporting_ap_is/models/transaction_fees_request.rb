# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # TransactionFeesRequest Model.
  class TransactionFeesRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id  of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # Example: 123456
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number (Ex: GB000000123) of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [String]
    attr_accessor :payer_number

    # Payer Number (Ex: GB000000123) of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [Array[Accounts]]
    attr_accessor :accounts

    # Card Id 
    # Optional
    # When both Card Id and Card PAN are not present on request, the response
    # will have all the fee items under the selected payer or account.
    # Example: 275549
    # @return [Integer]
    attr_accessor :card_id

    # Full Card PAN
    # Optional
    # When both Card Id and Card PAN are not present on request, the response
    # will have all the fee items under the selected payer or account or card
    # group.
    # @return [String]
    attr_accessor :card_pan

    # Invoice status of the fee items
    # Mandatory
    # Possible options:
    # I - Invoiced
    # U – Un-Invoiced
    # A – All
    # @return [String]
    attr_accessor :invoice_status

    # Fee type group in under which the Fee item is generated.
    # Optional.
    # Allowed values:
    # - Account Charges
    # - Card Charges
    # - Others Charges
    # @return [String]
    attr_accessor :fee_type_group

    # Fee Type Id.
    # Optional.
    # Example: 
    # 1. Simple Fee
    # 2. Card Event Fee
    # 3. Customer Event Fee
    # @return [Integer]
    attr_accessor :fee_type_id

    # Fee Item FromDate/Time 
    # Should be with in last 24 months 
    # Optional
    # Maximum of 210 days duration allowed per search, its configurable.
    # Format: yyyyMMdd
    # @return [String]
    attr_accessor :from_date

    # Fee Item To Date/Time
    # Optional
    # When blank and FromDate is provided on the input, all fee items took place
    # after the given from date/time should be returned. Note that the search is
    # allowed for the maximum of 60 days. Hence if the FromDate is older than 60
    # days from current date then the fee items for 60 days from FromDate will
    # be returned. 
    # Format: yyyyMMdd
    # @return [String]
    attr_accessor :to_date

    # Fee items Period. This is ignored when FromDate/Todate is supplied on the
    # request. 
    # 1.	Last 7 Days
    # 2.	Last 30 Days
    # 3.	Last 90 Days
    # 4.	Last 180 Days
    # Example : Pass 1 for Last 7 days fee items
    # @return [Integer]
    attr_accessor :period

    # True or False. When True, cancelled fee items are included on API response
    # @return [TrueClass | FalseClass]
    attr_accessor :include_cancelled_items

    # Product Id
    # Optional
    # Example: Sample list of product ids and description.
    # 100	Service fee
    # 102	Invoice production fee
    # 103	Account fee
    # 104	Transaction fee
    # 105	Card membership fee
    # @return [Integer]
    attr_accessor :product_id

    # Product Code 
    # Optional
    # Example: 
    # 1. Service fee
    # 2. Invoice production fee
    # 3. Account fee
    # 4. Transaction fee
    # 5. Card membership fee
    # @return [String]
    attr_accessor :product_code

    # Line item description.
    # Optional
    # Minimum of 4 characters should be provided else not considered
    # Those fee items that have the entered value at any part of the line item
    # description will be returned.
    # @return [String]
    attr_accessor :line_item_description

    # Allowed Sorting Options:
    # •	FeeDateAscending
    # •	FeeDateDescending
    # •	NetAmountAscending
    # •	NetAmountDescending
    # Optional.
    # Default: 1
    # @return [String]
    attr_accessor :sort_order

    # Page Number
    # @return [Integer]
    attr_accessor :current_page

    # Page Size – Number of records to show on a page
    # @return [Integer]
    attr_accessor :page_size

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['accounts'] = 'Accounts'
      @_hash['card_id'] = 'CardId'
      @_hash['card_pan'] = 'CardPAN'
      @_hash['invoice_status'] = 'InvoiceStatus'
      @_hash['fee_type_group'] = 'FeeTypeGroup'
      @_hash['fee_type_id'] = 'FeeTypeId'
      @_hash['from_date'] = 'FromDate'
      @_hash['to_date'] = 'ToDate'
      @_hash['period'] = 'Period'
      @_hash['include_cancelled_items'] = 'IncludeCancelledItems'
      @_hash['product_id'] = 'ProductId'
      @_hash['product_code'] = 'ProductCode'
      @_hash['line_item_description'] = 'LineItemDescription'
      @_hash['sort_order'] = 'SortOrder'
      @_hash['current_page'] = 'CurrentPage'
      @_hash['page_size'] = 'PageSize'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        accounts
        card_id
        card_pan
        invoice_status
        fee_type_group
        fee_type_id
        from_date
        to_date
        period
        include_cancelled_items
        product_id
        product_code
        line_item_description
        sort_order
        current_page
        page_size
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        card_id
        card_pan
        invoice_status
        fee_type_group
        fee_type_id
        from_date
        to_date
        period
        include_cancelled_items
        product_id
        product_code
        line_item_description
        sort_order
        current_page
        page_size
      ]
    end

    def initialize(col_co_id = SKIP,
                   col_co_code = SKIP,
                   payer_id = SKIP,
                   payer_number = SKIP,
                   accounts = SKIP,
                   card_id = SKIP,
                   card_pan = SKIP,
                   invoice_status = SKIP,
                   fee_type_group = SKIP,
                   fee_type_id = SKIP,
                   from_date = SKIP,
                   to_date = SKIP,
                   period = SKIP,
                   include_cancelled_items = SKIP,
                   product_id = SKIP,
                   product_code = SKIP,
                   line_item_description = SKIP,
                   sort_order = SKIP,
                   current_page = SKIP,
                   page_size = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @accounts = accounts unless accounts == SKIP
      @card_id = card_id unless card_id == SKIP
      @card_pan = card_pan unless card_pan == SKIP
      @invoice_status = invoice_status unless invoice_status == SKIP
      @fee_type_group = fee_type_group unless fee_type_group == SKIP
      @fee_type_id = fee_type_id unless fee_type_id == SKIP
      @from_date = from_date unless from_date == SKIP
      @to_date = to_date unless to_date == SKIP
      @period = period unless period == SKIP
      @include_cancelled_items = include_cancelled_items unless include_cancelled_items == SKIP
      @product_id = product_id unless product_id == SKIP
      @product_code = product_code unless product_code == SKIP
      @line_item_description = line_item_description unless line_item_description == SKIP
      @sort_order = sort_order unless sort_order == SKIP
      @current_page = current_page unless current_page == SKIP
      @page_size = page_size unless page_size == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      # Parameter is an array, so we need to iterate through it
      accounts = nil
      unless hash['Accounts'].nil?
        accounts = []
        hash['Accounts'].each do |structure|
          accounts << (Accounts.from_hash(structure) if structure)
        end
      end

      accounts = SKIP unless hash.key?('Accounts')
      card_id = hash.key?('CardId') ? hash['CardId'] : SKIP
      card_pan = hash.key?('CardPAN') ? hash['CardPAN'] : SKIP
      invoice_status = hash.key?('InvoiceStatus') ? hash['InvoiceStatus'] : SKIP
      fee_type_group = hash.key?('FeeTypeGroup') ? hash['FeeTypeGroup'] : SKIP
      fee_type_id = hash.key?('FeeTypeId') ? hash['FeeTypeId'] : SKIP
      from_date = hash.key?('FromDate') ? hash['FromDate'] : SKIP
      to_date = hash.key?('ToDate') ? hash['ToDate'] : SKIP
      period = hash.key?('Period') ? hash['Period'] : SKIP
      include_cancelled_items =
        hash.key?('IncludeCancelledItems') ? hash['IncludeCancelledItems'] : SKIP
      product_id = hash.key?('ProductId') ? hash['ProductId'] : SKIP
      product_code = hash.key?('ProductCode') ? hash['ProductCode'] : SKIP
      line_item_description =
        hash.key?('LineItemDescription') ? hash['LineItemDescription'] : SKIP
      sort_order = hash.key?('SortOrder') ? hash['SortOrder'] : SKIP
      current_page = hash.key?('CurrentPage') ? hash['CurrentPage'] : SKIP
      page_size = hash.key?('PageSize') ? hash['PageSize'] : SKIP

      # Create object from extracted values.
      TransactionFeesRequest.new(col_co_id,
                                 col_co_code,
                                 payer_id,
                                 payer_number,
                                 accounts,
                                 card_id,
                                 card_pan,
                                 invoice_status,
                                 fee_type_group,
                                 fee_type_id,
                                 from_date,
                                 to_date,
                                 period,
                                 include_cancelled_items,
                                 product_id,
                                 product_code,
                                 line_item_description,
                                 sort_order,
                                 current_page,
                                 page_size)
    end
  end
end
