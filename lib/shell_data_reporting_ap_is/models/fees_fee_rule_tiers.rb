# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # FeesFeeRuleTiers Model.
  class FeesFeeRuleTiers < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :tier_min

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :tier_max

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :date_effective

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :date_terminated

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :tier_value

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :fee_rule_basis_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :fee_rule_basis_description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tier_min'] = 'TierMin'
      @_hash['tier_max'] = 'TierMax'
      @_hash['date_effective'] = 'DateEffective'
      @_hash['date_terminated'] = 'DateTerminated'
      @_hash['tier_value'] = 'TierValue'
      @_hash['fee_rule_basis_id'] = 'FeeRuleBasisID'
      @_hash['fee_rule_basis_description'] = 'FeeRuleBasisDescription'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tier_min
        tier_max
        date_effective
        date_terminated
        tier_value
        fee_rule_basis_id
        fee_rule_basis_description
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        tier_min
        tier_max
        date_effective
        date_terminated
        tier_value
        fee_rule_basis_id
        fee_rule_basis_description
      ]
    end

    def initialize(tier_min = SKIP, tier_max = SKIP, date_effective = SKIP,
                   date_terminated = SKIP, tier_value = SKIP,
                   fee_rule_basis_id = SKIP, fee_rule_basis_description = SKIP)
      @tier_min = tier_min unless tier_min == SKIP
      @tier_max = tier_max unless tier_max == SKIP
      @date_effective = date_effective unless date_effective == SKIP
      @date_terminated = date_terminated unless date_terminated == SKIP
      @tier_value = tier_value unless tier_value == SKIP
      @fee_rule_basis_id = fee_rule_basis_id unless fee_rule_basis_id == SKIP
      unless fee_rule_basis_description == SKIP
        @fee_rule_basis_description =
          fee_rule_basis_description
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tier_min = hash.key?('TierMin') ? hash['TierMin'] : SKIP
      tier_max = hash.key?('TierMax') ? hash['TierMax'] : SKIP
      date_effective = hash.key?('DateEffective') ? hash['DateEffective'] : SKIP
      date_terminated =
        hash.key?('DateTerminated') ? hash['DateTerminated'] : SKIP
      tier_value = hash.key?('TierValue') ? hash['TierValue'] : SKIP
      fee_rule_basis_id =
        hash.key?('FeeRuleBasisID') ? hash['FeeRuleBasisID'] : SKIP
      fee_rule_basis_description =
        hash.key?('FeeRuleBasisDescription') ? hash['FeeRuleBasisDescription'] : SKIP

      # Create object from extracted values.
      FeesFeeRuleTiers.new(tier_min,
                           tier_max,
                           date_effective,
                           date_terminated,
                           tier_value,
                           fee_rule_basis_id,
                           fee_rule_basis_description)
    end
  end
end
