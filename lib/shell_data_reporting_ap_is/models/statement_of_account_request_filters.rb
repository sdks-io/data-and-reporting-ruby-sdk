# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # StatementOfAccountRequestFilters Model.
  class StatementOfAccountRequestFilters < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Optional If ColCo Id is passed else Mandatory.
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id of the selected payer.
    # Optional if PayerNumber is passed else Mandatory.
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory.
    # @return [String]
    attr_accessor :payer_number

    # True/False.
    # Optional. Default is False.
    # True if the past 13 monthly invoice trend to be included as part of the
    # response. Else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_monthly_invoice_trend

    # True/False.
    # Optional. Default is False.
    # True if the past X SOA documents are to be included as part of the
    # response. Else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_past_statement_of_accounts

    # True/False
    # Optional Default is False.
    # If true PastStatementOfAccounts entity on this API output should contain
    # the SOA documents that are due or overdue only.
    # @return [TrueClass | FalseClass]
    attr_accessor :due_or_over_due_soa_documents_only

    # This parameter is only applicable when “IncludePastStatementOfAccounts”
    # parameter is set to True.
    # @return [Integer]
    attr_accessor :number_of_soa_documents

    # True/False
    # Optional.
    # Default value is false.
    # When true InvoicesSummaries list will be returned in the API output.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_account_invoices_summary

    # Collecting Company Id of the selected payer. 
    # Optional If ColCo Code is passed else Mandatory.
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Id of the selected payer. 
    # Optional If ColCo Code is passed else Mandatory.
    # @return [Array[Accounts]]
    attr_accessor :accounts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['include_monthly_invoice_trend'] = 'IncludeMonthlyInvoiceTrend'
      @_hash['include_past_statement_of_accounts'] =
        'IncludePastStatementOfAccounts'
      @_hash['due_or_over_due_soa_documents_only'] =
        'DueOrOverDueSOADocumentsOnly'
      @_hash['number_of_soa_documents'] = 'NumberOfSOADocuments'
      @_hash['include_account_invoices_summary'] =
        'IncludeAccountInvoicesSummary'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['accounts'] = 'Accounts'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_code
        payer_id
        payer_number
        include_monthly_invoice_trend
        include_past_statement_of_accounts
        due_or_over_due_soa_documents_only
        number_of_soa_documents
        include_account_invoices_summary
        col_co_id
        accounts
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_code
        payer_id
        payer_number
        include_monthly_invoice_trend
        include_past_statement_of_accounts
        due_or_over_due_soa_documents_only
        number_of_soa_documents
        include_account_invoices_summary
        col_co_id
      ]
    end

    def initialize(col_co_code = SKIP, payer_id = SKIP, payer_number = SKIP,
                   include_monthly_invoice_trend = SKIP,
                   include_past_statement_of_accounts = SKIP,
                   due_or_over_due_soa_documents_only = SKIP,
                   number_of_soa_documents = SKIP,
                   include_account_invoices_summary = SKIP, col_co_id = SKIP,
                   accounts = SKIP)
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      unless include_monthly_invoice_trend == SKIP
        @include_monthly_invoice_trend =
          include_monthly_invoice_trend
      end
      unless include_past_statement_of_accounts == SKIP
        @include_past_statement_of_accounts =
          include_past_statement_of_accounts
      end
      unless due_or_over_due_soa_documents_only == SKIP
        @due_or_over_due_soa_documents_only =
          due_or_over_due_soa_documents_only
      end
      @number_of_soa_documents = number_of_soa_documents unless number_of_soa_documents == SKIP
      unless include_account_invoices_summary == SKIP
        @include_account_invoices_summary =
          include_account_invoices_summary
      end
      @col_co_id = col_co_id unless col_co_id == SKIP
      @accounts = accounts unless accounts == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      include_monthly_invoice_trend =
        hash.key?('IncludeMonthlyInvoiceTrend') ? hash['IncludeMonthlyInvoiceTrend'] : SKIP
      include_past_statement_of_accounts =
        hash.key?('IncludePastStatementOfAccounts') ? hash['IncludePastStatementOfAccounts'] : SKIP
      due_or_over_due_soa_documents_only =
        hash.key?('DueOrOverDueSOADocumentsOnly') ? hash['DueOrOverDueSOADocumentsOnly'] : SKIP
      number_of_soa_documents =
        hash.key?('NumberOfSOADocuments') ? hash['NumberOfSOADocuments'] : SKIP
      include_account_invoices_summary =
        hash.key?('IncludeAccountInvoicesSummary') ? hash['IncludeAccountInvoicesSummary'] : SKIP
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      accounts = nil
      unless hash['Accounts'].nil?
        accounts = []
        hash['Accounts'].each do |structure|
          accounts << (Accounts.from_hash(structure) if structure)
        end
      end

      accounts = SKIP unless hash.key?('Accounts')

      # Create object from extracted values.
      StatementOfAccountRequestFilters.new(col_co_code,
                                           payer_id,
                                           payer_number,
                                           include_monthly_invoice_trend,
                                           include_past_statement_of_accounts,
                                           due_or_over_due_soa_documents_only,
                                           number_of_soa_documents,
                                           include_account_invoices_summary,
                                           col_co_id,
                                           accounts)
    end
  end
end
