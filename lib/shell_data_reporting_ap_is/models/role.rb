# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # Role Model.
  class Role < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Role Name of the user
    # @return [String]
    attr_accessor :role_name

    # Whether the role is an administrator.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_customer_admin

    # Whether the role is a customer user.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_customer_user

    # True if the role is Shell user, else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_shell_admin

    # True/False.
    # True if the role is Service accounts, else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_service_account

    # True/False.
    # True, if the role allows user administration, else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_user_admin

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['role_name'] = 'RoleName'
      @_hash['is_customer_admin'] = 'IsCustomerAdmin'
      @_hash['is_customer_user'] = 'IsCustomerUser'
      @_hash['is_shell_admin'] = 'IsShellAdmin'
      @_hash['is_service_account'] = 'IsServiceAccount'
      @_hash['is_user_admin'] = 'IsUserAdmin'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        role_name
        is_customer_admin
        is_customer_user
        is_shell_admin
        is_service_account
        is_user_admin
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(role_name = SKIP, is_customer_admin = true,
                   is_customer_user = false, is_shell_admin = false,
                   is_service_account = false, is_user_admin = true)
      @role_name = role_name unless role_name == SKIP
      @is_customer_admin = is_customer_admin unless is_customer_admin == SKIP
      @is_customer_user = is_customer_user unless is_customer_user == SKIP
      @is_shell_admin = is_shell_admin unless is_shell_admin == SKIP
      @is_service_account = is_service_account unless is_service_account == SKIP
      @is_user_admin = is_user_admin unless is_user_admin == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      role_name = hash.key?('RoleName') ? hash['RoleName'] : SKIP
      is_customer_admin = hash['IsCustomerAdmin'] ||= true
      is_customer_user = hash['IsCustomerUser'] ||= false
      is_shell_admin = hash['IsShellAdmin'] ||= false
      is_service_account = hash['IsServiceAccount'] ||= false
      is_user_admin = hash['IsUserAdmin'] ||= true

      # Create object from extracted values.
      Role.new(role_name,
               is_customer_admin,
               is_customer_user,
               is_shell_admin,
               is_service_account,
               is_user_admin)
    end
  end
end
