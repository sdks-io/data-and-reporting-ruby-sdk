# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # BonusConfiguration Model.
  class BonusConfiguration < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account identifier of the Pricing Account associated with the Payer.
    # @return [Integer]
    attr_accessor :pricing_account_id

    # Account number of the Pricing Account associated with the Payer.
    # @return [String]
    attr_accessor :pricing_account_number

    # Short name of the Pricing Account associated with the Payer.
    # @return [String]
    attr_accessor :pricing_account_short_name

    # Full name of the Pricing Account associated with the Payer.
    # @return [String]
    attr_accessor :pricing_account_full_name

    # Bonus or association bonus configuration identifier that is associated to
    # the payer.
    # @return [Integer]
    attr_accessor :fee_rule_id

    # Bonus or association bonus configuration description that is associated to
    # the payer.
    # @return [String]
    attr_accessor :fee_rule_description

    # The bonus or association bonus configuration becomes effective on the
    # payer from this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :fee_rule_date_effective

    # The bonus or association bonus configuration is terminated for the payer
    # on this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :fee_rule_date_terminated

    # Configuration to specify how the bonus is paid.
    # Format: ID-Description
    # Example: 
    # 1-Pay to Payer
    # 2-Pay to invoice levels before the payer
    # 3-Pay to specific customer
    # 4-Pay to Association Customer
    # 5-Pay to Associated Customers
    # @return [String]
    attr_accessor :bonus_paid_to

    # Account identifier of the specific account to which the bonus is paid back
    # @return [Integer]
    attr_accessor :bonus_paid_to_account_id

    # Account number of the specific account to which the bonus is paid back
    # @return [String]
    attr_accessor :bonus_paid_to_account_number

    # Short name of the specific account to which the bonus is paid back
    # @return [String]
    attr_accessor :bonus_paid_to_account_short_name

    # Full name of the specific account to which the bonus is paid back
    # @return [String]
    attr_accessor :bonus_paid_to_account_full_name

    # Frequency of the configuration.
    # Format: ID-Description
    # Examples:
    # 1-Daily (all days)
    # 2-Daily (only working days)
    # 3-Weekly â€“ Monday
    # @return [String]
    attr_accessor :frequency

    # The next bonus is calculated for the payer on this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :next_calculation_date

    # The previous bonus was calculated for the payer on this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :previous_calculated_date

    # Fee Rule Basis configured.
    # Format: ID-Description
    # Example:
    # 1-Currency Per Unit
    # 2-Percentage of Uplift
    # 3-Lump Sum
    # @return [String]
    attr_accessor :fee_rule_basis

    # ISO currency code of the currency configured in the Bonus Configuration,
    # if any.
    # @return [String]
    attr_accessor :fee_rule_currency_code

    # Currency symbol of the currency configured in the Bonus Configuration, if
    # any.
    # @return [String]
    attr_accessor :fee_rule_currency_symbol

    # This bonus or association bonus is available from this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :fee_rule_available_from

    # This bonus or association bonus configuration will not be available from
    # this date.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :fee_rule_available_to

    # This bonus or association bonus configuration will not be available from
    # this date.
    # Format: YYYYMMDD
    # @return [Array[FeeRuleLocation]]
    attr_accessor :fee_rule_locations

    # This bonus or association bonus configuration will not be available from
    # this date.
    # Format: YYYYMMDD
    # @return [Array[FeeRuleTier]]
    attr_accessor :fee_rule_tiers

    # This bonus or association bonus configuration will not be available from
    # this date.
    # Format: YYYYMMDD
    # @return [Array[AssociatedAccount]]
    attr_accessor :associated_accounts

    # This bonus or association bonus configuration will not be available from
    # this date.
    # Format: YYYYMMDD
    # @return [Array[FeeRuleProduct]]
    attr_accessor :fee_rule_products

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['pricing_account_id'] = 'PricingAccountId'
      @_hash['pricing_account_number'] = 'PricingAccountNumber'
      @_hash['pricing_account_short_name'] = 'PricingAccountShortName'
      @_hash['pricing_account_full_name'] = 'PricingAccountFullName'
      @_hash['fee_rule_id'] = 'FeeRuleId'
      @_hash['fee_rule_description'] = 'FeeRuleDescription'
      @_hash['fee_rule_date_effective'] = 'FeeRuleDateEffective'
      @_hash['fee_rule_date_terminated'] = 'FeeRuleDateTerminated'
      @_hash['bonus_paid_to'] = 'BonusPaidTo'
      @_hash['bonus_paid_to_account_id'] = 'BonusPaidToAccountId'
      @_hash['bonus_paid_to_account_number'] = 'BonusPaidToAccountNumber'
      @_hash['bonus_paid_to_account_short_name'] =
        'BonusPaidToAccountShortName'
      @_hash['bonus_paid_to_account_full_name'] = 'BonusPaidToAccountFullName'
      @_hash['frequency'] = 'Frequency'
      @_hash['next_calculation_date'] = 'NextCalculationDate'
      @_hash['previous_calculated_date'] = 'PreviousCalculatedDate'
      @_hash['fee_rule_basis'] = 'FeeRuleBasis'
      @_hash['fee_rule_currency_code'] = 'FeeRuleCurrencyCode'
      @_hash['fee_rule_currency_symbol'] = 'FeeRuleCurrencySymbol'
      @_hash['fee_rule_available_from'] = 'FeeRuleAvailableFrom'
      @_hash['fee_rule_available_to'] = 'FeeRuleAvailableTo'
      @_hash['fee_rule_locations'] = 'FeeRuleLocations'
      @_hash['fee_rule_tiers'] = 'FeeRuleTiers'
      @_hash['associated_accounts'] = 'AssociatedAccounts'
      @_hash['fee_rule_products'] = 'FeeRuleProducts'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        pricing_account_id
        pricing_account_number
        pricing_account_short_name
        pricing_account_full_name
        fee_rule_id
        fee_rule_description
        fee_rule_date_effective
        fee_rule_date_terminated
        bonus_paid_to
        bonus_paid_to_account_id
        bonus_paid_to_account_number
        bonus_paid_to_account_short_name
        bonus_paid_to_account_full_name
        frequency
        next_calculation_date
        previous_calculated_date
        fee_rule_basis
        fee_rule_currency_code
        fee_rule_currency_symbol
        fee_rule_available_from
        fee_rule_available_to
        fee_rule_locations
        fee_rule_tiers
        associated_accounts
        fee_rule_products
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        pricing_account_id
        pricing_account_number
        pricing_account_short_name
        pricing_account_full_name
        fee_rule_id
        fee_rule_description
        fee_rule_date_effective
        fee_rule_date_terminated
        bonus_paid_to
        bonus_paid_to_account_id
        bonus_paid_to_account_number
        bonus_paid_to_account_short_name
        bonus_paid_to_account_full_name
        frequency
        next_calculation_date
        previous_calculated_date
        fee_rule_basis
        fee_rule_currency_code
        fee_rule_currency_symbol
        fee_rule_available_from
        fee_rule_available_to
      ]
    end

    def initialize(pricing_account_id = SKIP, pricing_account_number = SKIP,
                   pricing_account_short_name = SKIP,
                   pricing_account_full_name = SKIP, fee_rule_id = SKIP,
                   fee_rule_description = SKIP, fee_rule_date_effective = SKIP,
                   fee_rule_date_terminated = SKIP, bonus_paid_to = SKIP,
                   bonus_paid_to_account_id = SKIP,
                   bonus_paid_to_account_number = SKIP,
                   bonus_paid_to_account_short_name = SKIP,
                   bonus_paid_to_account_full_name = SKIP, frequency = SKIP,
                   next_calculation_date = SKIP,
                   previous_calculated_date = SKIP, fee_rule_basis = SKIP,
                   fee_rule_currency_code = SKIP,
                   fee_rule_currency_symbol = SKIP,
                   fee_rule_available_from = SKIP, fee_rule_available_to = SKIP,
                   fee_rule_locations = SKIP, fee_rule_tiers = SKIP,
                   associated_accounts = SKIP, fee_rule_products = SKIP)
      @pricing_account_id = pricing_account_id unless pricing_account_id == SKIP
      @pricing_account_number = pricing_account_number unless pricing_account_number == SKIP
      unless pricing_account_short_name == SKIP
        @pricing_account_short_name =
          pricing_account_short_name
      end
      unless pricing_account_full_name == SKIP
        @pricing_account_full_name =
          pricing_account_full_name
      end
      @fee_rule_id = fee_rule_id unless fee_rule_id == SKIP
      @fee_rule_description = fee_rule_description unless fee_rule_description == SKIP
      @fee_rule_date_effective = fee_rule_date_effective unless fee_rule_date_effective == SKIP
      @fee_rule_date_terminated = fee_rule_date_terminated unless fee_rule_date_terminated == SKIP
      @bonus_paid_to = bonus_paid_to unless bonus_paid_to == SKIP
      @bonus_paid_to_account_id = bonus_paid_to_account_id unless bonus_paid_to_account_id == SKIP
      unless bonus_paid_to_account_number == SKIP
        @bonus_paid_to_account_number =
          bonus_paid_to_account_number
      end
      unless bonus_paid_to_account_short_name == SKIP
        @bonus_paid_to_account_short_name =
          bonus_paid_to_account_short_name
      end
      unless bonus_paid_to_account_full_name == SKIP
        @bonus_paid_to_account_full_name =
          bonus_paid_to_account_full_name
      end
      @frequency = frequency unless frequency == SKIP
      @next_calculation_date = next_calculation_date unless next_calculation_date == SKIP
      @previous_calculated_date = previous_calculated_date unless previous_calculated_date == SKIP
      @fee_rule_basis = fee_rule_basis unless fee_rule_basis == SKIP
      @fee_rule_currency_code = fee_rule_currency_code unless fee_rule_currency_code == SKIP
      @fee_rule_currency_symbol = fee_rule_currency_symbol unless fee_rule_currency_symbol == SKIP
      @fee_rule_available_from = fee_rule_available_from unless fee_rule_available_from == SKIP
      @fee_rule_available_to = fee_rule_available_to unless fee_rule_available_to == SKIP
      @fee_rule_locations = fee_rule_locations unless fee_rule_locations == SKIP
      @fee_rule_tiers = fee_rule_tiers unless fee_rule_tiers == SKIP
      @associated_accounts = associated_accounts unless associated_accounts == SKIP
      @fee_rule_products = fee_rule_products unless fee_rule_products == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pricing_account_id =
        hash.key?('PricingAccountId') ? hash['PricingAccountId'] : SKIP
      pricing_account_number =
        hash.key?('PricingAccountNumber') ? hash['PricingAccountNumber'] : SKIP
      pricing_account_short_name =
        hash.key?('PricingAccountShortName') ? hash['PricingAccountShortName'] : SKIP
      pricing_account_full_name =
        hash.key?('PricingAccountFullName') ? hash['PricingAccountFullName'] : SKIP
      fee_rule_id = hash.key?('FeeRuleId') ? hash['FeeRuleId'] : SKIP
      fee_rule_description =
        hash.key?('FeeRuleDescription') ? hash['FeeRuleDescription'] : SKIP
      fee_rule_date_effective =
        hash.key?('FeeRuleDateEffective') ? hash['FeeRuleDateEffective'] : SKIP
      fee_rule_date_terminated =
        hash.key?('FeeRuleDateTerminated') ? hash['FeeRuleDateTerminated'] : SKIP
      bonus_paid_to = hash.key?('BonusPaidTo') ? hash['BonusPaidTo'] : SKIP
      bonus_paid_to_account_id =
        hash.key?('BonusPaidToAccountId') ? hash['BonusPaidToAccountId'] : SKIP
      bonus_paid_to_account_number =
        hash.key?('BonusPaidToAccountNumber') ? hash['BonusPaidToAccountNumber'] : SKIP
      bonus_paid_to_account_short_name =
        hash.key?('BonusPaidToAccountShortName') ? hash['BonusPaidToAccountShortName'] : SKIP
      bonus_paid_to_account_full_name =
        hash.key?('BonusPaidToAccountFullName') ? hash['BonusPaidToAccountFullName'] : SKIP
      frequency = hash.key?('Frequency') ? hash['Frequency'] : SKIP
      next_calculation_date =
        hash.key?('NextCalculationDate') ? hash['NextCalculationDate'] : SKIP
      previous_calculated_date =
        hash.key?('PreviousCalculatedDate') ? hash['PreviousCalculatedDate'] : SKIP
      fee_rule_basis = hash.key?('FeeRuleBasis') ? hash['FeeRuleBasis'] : SKIP
      fee_rule_currency_code =
        hash.key?('FeeRuleCurrencyCode') ? hash['FeeRuleCurrencyCode'] : SKIP
      fee_rule_currency_symbol =
        hash.key?('FeeRuleCurrencySymbol') ? hash['FeeRuleCurrencySymbol'] : SKIP
      fee_rule_available_from =
        hash.key?('FeeRuleAvailableFrom') ? hash['FeeRuleAvailableFrom'] : SKIP
      fee_rule_available_to =
        hash.key?('FeeRuleAvailableTo') ? hash['FeeRuleAvailableTo'] : SKIP
      # Parameter is an array, so we need to iterate through it
      fee_rule_locations = nil
      unless hash['FeeRuleLocations'].nil?
        fee_rule_locations = []
        hash['FeeRuleLocations'].each do |structure|
          fee_rule_locations << (FeeRuleLocation.from_hash(structure) if structure)
        end
      end

      fee_rule_locations = SKIP unless hash.key?('FeeRuleLocations')
      # Parameter is an array, so we need to iterate through it
      fee_rule_tiers = nil
      unless hash['FeeRuleTiers'].nil?
        fee_rule_tiers = []
        hash['FeeRuleTiers'].each do |structure|
          fee_rule_tiers << (FeeRuleTier.from_hash(structure) if structure)
        end
      end

      fee_rule_tiers = SKIP unless hash.key?('FeeRuleTiers')
      # Parameter is an array, so we need to iterate through it
      associated_accounts = nil
      unless hash['AssociatedAccounts'].nil?
        associated_accounts = []
        hash['AssociatedAccounts'].each do |structure|
          associated_accounts << (AssociatedAccount.from_hash(structure) if structure)
        end
      end

      associated_accounts = SKIP unless hash.key?('AssociatedAccounts')
      # Parameter is an array, so we need to iterate through it
      fee_rule_products = nil
      unless hash['FeeRuleProducts'].nil?
        fee_rule_products = []
        hash['FeeRuleProducts'].each do |structure|
          fee_rule_products << (FeeRuleProduct.from_hash(structure) if structure)
        end
      end

      fee_rule_products = SKIP unless hash.key?('FeeRuleProducts')

      # Create object from extracted values.
      BonusConfiguration.new(pricing_account_id,
                             pricing_account_number,
                             pricing_account_short_name,
                             pricing_account_full_name,
                             fee_rule_id,
                             fee_rule_description,
                             fee_rule_date_effective,
                             fee_rule_date_terminated,
                             bonus_paid_to,
                             bonus_paid_to_account_id,
                             bonus_paid_to_account_number,
                             bonus_paid_to_account_short_name,
                             bonus_paid_to_account_full_name,
                             frequency,
                             next_calculation_date,
                             previous_calculated_date,
                             fee_rule_basis,
                             fee_rule_currency_code,
                             fee_rule_currency_symbol,
                             fee_rule_available_from,
                             fee_rule_available_to,
                             fee_rule_locations,
                             fee_rule_tiers,
                             associated_accounts,
                             fee_rule_products)
    end
  end
end
