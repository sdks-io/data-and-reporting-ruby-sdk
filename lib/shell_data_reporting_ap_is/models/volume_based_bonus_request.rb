# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # VolumeBasedBonusRequest Model.
  class VolumeBasedBonusRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [String]
    attr_accessor :payer_number

    # The API will return the details of the previously calculated/paid bonus
    # and fuel consumption (Volume) in the response when this flag is ‘True’.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_history

    # The API will return the details of the monthly breakup of current period
    # fuel consumption (Volume) in the response when this flag is ‘True’.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_current_period_volume

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['include_history'] = 'IncludeHistory'
      @_hash['include_current_period_volume'] = 'IncludeCurrentPeriodVolume'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        include_history
        include_current_period_volume
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(col_co_id = SKIP, col_co_code = SKIP, payer_id = SKIP,
                   payer_number = SKIP, include_history = SKIP,
                   include_current_period_volume = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @include_history = include_history unless include_history == SKIP
      unless include_current_period_volume == SKIP
        @include_current_period_volume =
          include_current_period_volume
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      include_history =
        hash.key?('IncludeHistory') ? hash['IncludeHistory'] : SKIP
      include_current_period_volume =
        hash.key?('IncludeCurrentPeriodVolume') ? hash['IncludeCurrentPeriodVolume'] : SKIP

      # Create object from extracted values.
      VolumeBasedBonusRequest.new(col_co_id,
                                  col_co_code,
                                  payer_id,
                                  payer_number,
                                  include_history,
                                  include_current_period_volume)
    end
  end
end
