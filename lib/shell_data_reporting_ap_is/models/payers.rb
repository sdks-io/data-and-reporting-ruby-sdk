# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # Payers Model.
  class Payers < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id of the payer
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer id of the customer.
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the customer.
    # @return [String]
    attr_accessor :payer_number

    # Payer Name of the customer.
    # @return [String]
    attr_accessor :payer_name

    # Payer Group identifier of the customer
    # @return [Integer]
    attr_accessor :payer_group_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['payer_name'] = 'PayerName'
      @_hash['payer_group_id'] = 'PayerGroupId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        payer_name
        payer_group_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        payer_name
        payer_group_id
      ]
    end

    def initialize(col_co_id = SKIP,
                   col_co_code = SKIP,
                   payer_id = SKIP,
                   payer_number = SKIP,
                   payer_name = SKIP,
                   payer_group_id = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @payer_name = payer_name unless payer_name == SKIP
      @payer_group_id = payer_group_id unless payer_group_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      payer_name = hash.key?('PayerName') ? hash['PayerName'] : SKIP
      payer_group_id = hash.key?('PayerGroupId') ? hash['PayerGroupId'] : SKIP

      # Create object from extracted values.
      Payers.new(col_co_id,
                 col_co_code,
                 payer_id,
                 payer_number,
                 payer_name,
                 payer_group_id)
    end
  end
end
