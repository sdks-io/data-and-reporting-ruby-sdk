# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # CardTypeResponseCustomerCardTypesItems Model.
  class CardTypeResponseCustomerCardTypesItems < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # True/False – Whether the cards of this card type can have PIN.
    # @return [TrueClass | FalseClass]
    attr_accessor :can_have_pin

    # Card Type Id
    # @return [Integer]
    attr_accessor :card_type_id

    # Card Type Name.
    # @return [String]
    attr_accessor :card_type_name

    # ISO currency code of the country.
    # @return [String]
    attr_accessor :col_co_currency_code

    # Customer Card Type Id
    # @return [Integer]
    attr_accessor :customer_card_type_id

    # Customer Card Type Id
    # @return [CardDayTimeRestrictions]
    attr_accessor :day_time_restrictions

    # Default Purchase category of the card type.
    # @return [Integer]
    attr_accessor :default_purchase_category_id

    # Default Name to be embossed on the card
    # @return [String]
    attr_accessor :emboss_account_name

    # Default Expiry period.
    # @return [Integer]
    attr_accessor :expiry_period

    # True/False – Wether it is a CRT Card type or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_crt

    # True/False – Whether it is it a Fleet Card typeor not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_fleet

    # True/False – Whether it is an International Card type or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_international

    # True/False – Whether it is a National Card type or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_national

    # True/False – Whether this card type is allowed in partner Stations.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_partner_sites_included

    # True/False – Whether it is only allowed in Shell Stations or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_shell_sites_only

    # True/False - Whether it is a Virtual Card type or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_virtual

    # True/False – Whether this card type is visible in SFH for card ordering.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_visible_to_customers

    # Whether card type is active or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_active

    # Whether card type is active or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_card_available_for_download

    # Whether card type is active or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_card_visible_to_customers

    # PAN Length
    # @return [Integer]
    attr_accessor :pan_length

    # PAN Length
    # @return [Array[PurchaseCategories]]
    attr_accessor :purchase_categories

    # Token type identifier.
    # @return [Integer]
    attr_accessor :token_type_id

    # Token Type Name.
    # @return [String]
    attr_accessor :token_type_name

    # Token Type Name.
    # @return [CardUsageRestrictions]
    attr_accessor :usage_restrictions

    # Is Europay, MasterCard, and Visa Contactless enabled or not
    # @return [TrueClass | FalseClass]
    attr_accessor :emv_contactless

    # Whether the card type is enabled for RFID (Radio Frequency Identification)
    # @return [TrueClass | FalseClass]
    attr_accessor :rfid

    # PIN change supported or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :pin_change_supported

    # Whether a PIN is mandatory for the cards of this card type.
    # @return [TrueClass | FalseClass]
    attr_accessor :require_pin

    # Whether offline PIN is enabled or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :offline_pin

    # Whether card type is default or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_default

    # True/False 
    # Note: ApplicationsToShowNPIITokens will be set as ‘True’ when the
    # accessing application API key exists in the “ApplicationsToShowNPIITokens”
    # card type configuration else “False”.
    # @return [TrueClass | FalseClass]
    attr_accessor :applications_to_show_npii_tokens

    # Id of the medium type identifier.
    # Example: 1,2,4
    # Full list below:
    # 1 - Fuel Card
    # 2 - Fuel Card with EV
    # 3 - EV only
    # 4 - Fuel Card and Key Fob
    # 5 - Key Fob
    # 6 - Virtual Card
    # 7 - NPII Token
    # 8 – Smartpay Token
    # @return [Integer]
    attr_accessor :medium_type_id

    # Name of the medium type identifier.
    # Example: Fuel Card, Fuel Card with EV, Key Fob  
    # Full list below:
    # 1 - Fuel Card
    # 2 - Fuel Card with EV
    # 3 - EV only
    # 4 - Fuel Card and Key Fob
    # 5 - Key Fob
    # 6 - Virtual Card
    # 7 - NPII Token
    # 8 - Smartpay Token
    # @return [String]
    attr_accessor :medium_type

    # Currency symbol of the country.
    # @return [String]
    attr_accessor :col_co_currency_symbol

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['can_have_pin'] = 'CanHavePIN'
      @_hash['card_type_id'] = 'CardTypeId'
      @_hash['card_type_name'] = 'CardTypeName'
      @_hash['col_co_currency_code'] = 'ColCoCurrencyCode'
      @_hash['customer_card_type_id'] = 'CustomerCardTypeId'
      @_hash['day_time_restrictions'] = 'DayTimeRestrictions'
      @_hash['default_purchase_category_id'] = 'DefaultPurchaseCategoryId'
      @_hash['emboss_account_name'] = 'EmbossAccountName'
      @_hash['expiry_period'] = 'ExpiryPeriod'
      @_hash['is_crt'] = 'IsCRT'
      @_hash['is_fleet'] = 'IsFleet'
      @_hash['is_international'] = 'IsInternational'
      @_hash['is_national'] = 'IsNational'
      @_hash['is_partner_sites_included'] = 'IsPartnerSitesIncluded'
      @_hash['is_shell_sites_only'] = 'IsShellSitesOnly'
      @_hash['is_virtual'] = 'IsVirtual'
      @_hash['is_visible_to_customers'] = 'IsVisibleToCustomers'
      @_hash['is_active'] = 'IsActive'
      @_hash['is_card_available_for_download'] = 'IsCardAvailableForDownload'
      @_hash['is_card_visible_to_customers'] = 'IsCardVisibleToCustomers'
      @_hash['pan_length'] = 'PANLength'
      @_hash['purchase_categories'] = 'PurchaseCategories'
      @_hash['token_type_id'] = 'TokenTypeId'
      @_hash['token_type_name'] = 'TokenTypeName'
      @_hash['usage_restrictions'] = 'UsageRestrictions'
      @_hash['emv_contactless'] = 'EMVContactless'
      @_hash['rfid'] = 'RFID'
      @_hash['pin_change_supported'] = 'PINChangeSupported'
      @_hash['require_pin'] = 'RequirePIN'
      @_hash['offline_pin'] = 'OfflinePIN'
      @_hash['is_default'] = 'IsDefault'
      @_hash['applications_to_show_npii_tokens'] =
        'ApplicationsToShowNPIITokens'
      @_hash['medium_type_id'] = 'MediumTypeID'
      @_hash['medium_type'] = 'MediumType'
      @_hash['col_co_currency_symbol'] = 'ColCoCurrencySymbol'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        can_have_pin
        card_type_id
        card_type_name
        col_co_currency_code
        customer_card_type_id
        day_time_restrictions
        default_purchase_category_id
        emboss_account_name
        expiry_period
        is_crt
        is_fleet
        is_international
        is_national
        is_partner_sites_included
        is_shell_sites_only
        is_virtual
        is_visible_to_customers
        is_active
        is_card_available_for_download
        is_card_visible_to_customers
        pan_length
        purchase_categories
        token_type_id
        token_type_name
        usage_restrictions
        emv_contactless
        rfid
        pin_change_supported
        require_pin
        offline_pin
        is_default
        applications_to_show_npii_tokens
        medium_type_id
        medium_type
        col_co_currency_symbol
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        card_type_id
        card_type_name
        col_co_currency_code
        customer_card_type_id
        default_purchase_category_id
        emboss_account_name
        expiry_period
        pan_length
        purchase_categories
        token_type_id
        token_type_name
        medium_type_id
        medium_type
        col_co_currency_symbol
      ]
    end

    def initialize(can_have_pin = SKIP, card_type_id = SKIP,
                   card_type_name = SKIP, col_co_currency_code = SKIP,
                   customer_card_type_id = SKIP, day_time_restrictions = SKIP,
                   default_purchase_category_id = SKIP,
                   emboss_account_name = SKIP, expiry_period = SKIP,
                   is_crt = SKIP, is_fleet = SKIP, is_international = SKIP,
                   is_national = SKIP, is_partner_sites_included = SKIP,
                   is_shell_sites_only = SKIP, is_virtual = SKIP,
                   is_visible_to_customers = SKIP, is_active = SKIP,
                   is_card_available_for_download = SKIP,
                   is_card_visible_to_customers = SKIP, pan_length = SKIP,
                   purchase_categories = SKIP, token_type_id = SKIP,
                   token_type_name = SKIP, usage_restrictions = SKIP,
                   emv_contactless = SKIP, rfid = SKIP,
                   pin_change_supported = SKIP, require_pin = SKIP,
                   offline_pin = SKIP, is_default = SKIP,
                   applications_to_show_npii_tokens = SKIP,
                   medium_type_id = SKIP, medium_type = SKIP,
                   col_co_currency_symbol = SKIP)
      @can_have_pin = can_have_pin unless can_have_pin == SKIP
      @card_type_id = card_type_id unless card_type_id == SKIP
      @card_type_name = card_type_name unless card_type_name == SKIP
      @col_co_currency_code = col_co_currency_code unless col_co_currency_code == SKIP
      @customer_card_type_id = customer_card_type_id unless customer_card_type_id == SKIP
      @day_time_restrictions = day_time_restrictions unless day_time_restrictions == SKIP
      unless default_purchase_category_id == SKIP
        @default_purchase_category_id =
          default_purchase_category_id
      end
      @emboss_account_name = emboss_account_name unless emboss_account_name == SKIP
      @expiry_period = expiry_period unless expiry_period == SKIP
      @is_crt = is_crt unless is_crt == SKIP
      @is_fleet = is_fleet unless is_fleet == SKIP
      @is_international = is_international unless is_international == SKIP
      @is_national = is_national unless is_national == SKIP
      unless is_partner_sites_included == SKIP
        @is_partner_sites_included =
          is_partner_sites_included
      end
      @is_shell_sites_only = is_shell_sites_only unless is_shell_sites_only == SKIP
      @is_virtual = is_virtual unless is_virtual == SKIP
      @is_visible_to_customers = is_visible_to_customers unless is_visible_to_customers == SKIP
      @is_active = is_active unless is_active == SKIP
      unless is_card_available_for_download == SKIP
        @is_card_available_for_download =
          is_card_available_for_download
      end
      unless is_card_visible_to_customers == SKIP
        @is_card_visible_to_customers =
          is_card_visible_to_customers
      end
      @pan_length = pan_length unless pan_length == SKIP
      @purchase_categories = purchase_categories unless purchase_categories == SKIP
      @token_type_id = token_type_id unless token_type_id == SKIP
      @token_type_name = token_type_name unless token_type_name == SKIP
      @usage_restrictions = usage_restrictions unless usage_restrictions == SKIP
      @emv_contactless = emv_contactless unless emv_contactless == SKIP
      @rfid = rfid unless rfid == SKIP
      @pin_change_supported = pin_change_supported unless pin_change_supported == SKIP
      @require_pin = require_pin unless require_pin == SKIP
      @offline_pin = offline_pin unless offline_pin == SKIP
      @is_default = is_default unless is_default == SKIP
      unless applications_to_show_npii_tokens == SKIP
        @applications_to_show_npii_tokens =
          applications_to_show_npii_tokens
      end
      @medium_type_id = medium_type_id unless medium_type_id == SKIP
      @medium_type = medium_type unless medium_type == SKIP
      @col_co_currency_symbol = col_co_currency_symbol unless col_co_currency_symbol == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      can_have_pin = hash.key?('CanHavePIN') ? hash['CanHavePIN'] : SKIP
      card_type_id = hash.key?('CardTypeId') ? hash['CardTypeId'] : SKIP
      card_type_name = hash.key?('CardTypeName') ? hash['CardTypeName'] : SKIP
      col_co_currency_code =
        hash.key?('ColCoCurrencyCode') ? hash['ColCoCurrencyCode'] : SKIP
      customer_card_type_id =
        hash.key?('CustomerCardTypeId') ? hash['CustomerCardTypeId'] : SKIP
      day_time_restrictions = CardDayTimeRestrictions.from_hash(hash['DayTimeRestrictions']) if
        hash['DayTimeRestrictions']
      default_purchase_category_id =
        hash.key?('DefaultPurchaseCategoryId') ? hash['DefaultPurchaseCategoryId'] : SKIP
      emboss_account_name =
        hash.key?('EmbossAccountName') ? hash['EmbossAccountName'] : SKIP
      expiry_period = hash.key?('ExpiryPeriod') ? hash['ExpiryPeriod'] : SKIP
      is_crt = hash.key?('IsCRT') ? hash['IsCRT'] : SKIP
      is_fleet = hash.key?('IsFleet') ? hash['IsFleet'] : SKIP
      is_international =
        hash.key?('IsInternational') ? hash['IsInternational'] : SKIP
      is_national = hash.key?('IsNational') ? hash['IsNational'] : SKIP
      is_partner_sites_included =
        hash.key?('IsPartnerSitesIncluded') ? hash['IsPartnerSitesIncluded'] : SKIP
      is_shell_sites_only =
        hash.key?('IsShellSitesOnly') ? hash['IsShellSitesOnly'] : SKIP
      is_virtual = hash.key?('IsVirtual') ? hash['IsVirtual'] : SKIP
      is_visible_to_customers =
        hash.key?('IsVisibleToCustomers') ? hash['IsVisibleToCustomers'] : SKIP
      is_active = hash.key?('IsActive') ? hash['IsActive'] : SKIP
      is_card_available_for_download =
        hash.key?('IsCardAvailableForDownload') ? hash['IsCardAvailableForDownload'] : SKIP
      is_card_visible_to_customers =
        hash.key?('IsCardVisibleToCustomers') ? hash['IsCardVisibleToCustomers'] : SKIP
      pan_length = hash.key?('PANLength') ? hash['PANLength'] : SKIP
      # Parameter is an array, so we need to iterate through it
      purchase_categories = nil
      unless hash['PurchaseCategories'].nil?
        purchase_categories = []
        hash['PurchaseCategories'].each do |structure|
          purchase_categories << (PurchaseCategories.from_hash(structure) if structure)
        end
      end

      purchase_categories = SKIP unless hash.key?('PurchaseCategories')
      token_type_id = hash.key?('TokenTypeId') ? hash['TokenTypeId'] : SKIP
      token_type_name =
        hash.key?('TokenTypeName') ? hash['TokenTypeName'] : SKIP
      usage_restrictions = CardUsageRestrictions.from_hash(hash['UsageRestrictions']) if
        hash['UsageRestrictions']
      emv_contactless =
        hash.key?('EMVContactless') ? hash['EMVContactless'] : SKIP
      rfid = hash.key?('RFID') ? hash['RFID'] : SKIP
      pin_change_supported =
        hash.key?('PINChangeSupported') ? hash['PINChangeSupported'] : SKIP
      require_pin = hash.key?('RequirePIN') ? hash['RequirePIN'] : SKIP
      offline_pin = hash.key?('OfflinePIN') ? hash['OfflinePIN'] : SKIP
      is_default = hash.key?('IsDefault') ? hash['IsDefault'] : SKIP
      applications_to_show_npii_tokens =
        hash.key?('ApplicationsToShowNPIITokens') ? hash['ApplicationsToShowNPIITokens'] : SKIP
      medium_type_id = hash.key?('MediumTypeID') ? hash['MediumTypeID'] : SKIP
      medium_type = hash.key?('MediumType') ? hash['MediumType'] : SKIP
      col_co_currency_symbol =
        hash.key?('ColCoCurrencySymbol') ? hash['ColCoCurrencySymbol'] : SKIP

      # Create object from extracted values.
      CardTypeResponseCustomerCardTypesItems.new(can_have_pin,
                                                 card_type_id,
                                                 card_type_name,
                                                 col_co_currency_code,
                                                 customer_card_type_id,
                                                 day_time_restrictions,
                                                 default_purchase_category_id,
                                                 emboss_account_name,
                                                 expiry_period,
                                                 is_crt,
                                                 is_fleet,
                                                 is_international,
                                                 is_national,
                                                 is_partner_sites_included,
                                                 is_shell_sites_only,
                                                 is_virtual,
                                                 is_visible_to_customers,
                                                 is_active,
                                                 is_card_available_for_download,
                                                 is_card_visible_to_customers,
                                                 pan_length,
                                                 purchase_categories,
                                                 token_type_id,
                                                 token_type_name,
                                                 usage_restrictions,
                                                 emv_contactless,
                                                 rfid,
                                                 pin_change_supported,
                                                 require_pin,
                                                 offline_pin,
                                                 is_default,
                                                 applications_to_show_npii_tokens,
                                                 medium_type_id,
                                                 medium_type,
                                                 col_co_currency_symbol)
    end
  end
end
