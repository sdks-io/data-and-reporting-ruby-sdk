# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # FuelConsumptionRequest Model.
  class FuelConsumptionRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id  of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code  of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id  of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [String]
    attr_accessor :payer_number

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [Array[Accounts]]
    attr_accessor :accounts

    # Card Group Id in GFN
    # Optional
    # Example: 200
    # @return [Integer]
    attr_accessor :card_group_id

    # Card Group Name
    # Optional
    # This input is a search criterion, if given.
    # @return [String]
    attr_accessor :card_group_name

    # Card Group Name
    # Optional
    # This input is a search criterion, if given.
    # @return [Array[FuelConsumptionCard]]
    attr_accessor :cards

    # Transactions from Date
    # Optional – ‘Period’ will be considered when this field is not provided.
    # @return [String]
    attr_accessor :from_date

    # Transactions to Date
    # Optional
    # Format: yyyyMMdd
    # @return [String]
    attr_accessor :to_date

    # Transactions Period. This is ignored when FromDate is supplied on the
    # request 
    # Allowed values :
    # 1.	Last 7 Days
    # 2.	Last 30 Days
    # 3.	Last 90 Days
    # Optional - When FromDate/ToDate and Period are not provided, ‘Last 7 Days’
    # value is considered as default Period.
    # @return [Integer]
    attr_accessor :period

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['accounts'] = 'Accounts'
      @_hash['card_group_id'] = 'CardGroupId'
      @_hash['card_group_name'] = 'CardGroupName'
      @_hash['cards'] = 'Cards'
      @_hash['from_date'] = 'FromDate'
      @_hash['to_date'] = 'ToDate'
      @_hash['period'] = 'Period'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        accounts
        card_group_id
        card_group_name
        cards
        from_date
        to_date
        period
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(col_co_id = SKIP,
                   col_co_code = SKIP,
                   payer_id = SKIP,
                   payer_number = SKIP,
                   accounts = SKIP,
                   card_group_id = SKIP,
                   card_group_name = SKIP,
                   cards = SKIP,
                   from_date = SKIP,
                   to_date = SKIP,
                   period = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @accounts = accounts unless accounts == SKIP
      @card_group_id = card_group_id unless card_group_id == SKIP
      @card_group_name = card_group_name unless card_group_name == SKIP
      @cards = cards unless cards == SKIP
      @from_date = from_date unless from_date == SKIP
      @to_date = to_date unless to_date == SKIP
      @period = period unless period == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      # Parameter is an array, so we need to iterate through it
      accounts = nil
      unless hash['Accounts'].nil?
        accounts = []
        hash['Accounts'].each do |structure|
          accounts << (Accounts.from_hash(structure) if structure)
        end
      end

      accounts = SKIP unless hash.key?('Accounts')
      card_group_id = hash.key?('CardGroupId') ? hash['CardGroupId'] : SKIP
      card_group_name =
        hash.key?('CardGroupName') ? hash['CardGroupName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      cards = nil
      unless hash['Cards'].nil?
        cards = []
        hash['Cards'].each do |structure|
          cards << (FuelConsumptionCard.from_hash(structure) if structure)
        end
      end

      cards = SKIP unless hash.key?('Cards')
      from_date = hash.key?('FromDate') ? hash['FromDate'] : SKIP
      to_date = hash.key?('ToDate') ? hash['ToDate'] : SKIP
      period = hash.key?('Period') ? hash['Period'] : SKIP

      # Create object from extracted values.
      FuelConsumptionRequest.new(col_co_id,
                                 col_co_code,
                                 payer_id,
                                 payer_number,
                                 accounts,
                                 card_group_id,
                                 card_group_name,
                                 cards,
                                 from_date,
                                 to_date,
                                 period)
    end
  end
end
