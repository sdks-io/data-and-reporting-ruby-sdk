# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # EIDDocumentResponse Model.
  class EIDDocumentResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # UUID (according to RFC 4122 standards) for requests and responses. This
    # will be played back in the response from the request.
    # @return [String]
    attr_accessor :request_id

    # Indicates overall status of the request. Allowed values: SUCCESS, FAILED
    # @return [String]
    attr_accessor :status

    # Indicates overall status of the request. Allowed values: SUCCESS, FAILED
    # @return [Array[EIDDocument]]
    attr_accessor :data

    # Number of records returned in the response
    # @return [Integer]
    attr_accessor :page_size

    # Current page
    # @return [Integer]
    attr_accessor :page

    # Total number of pages available for the requested data
    # @return [Integer]
    attr_accessor :total_pages

    # Total number of elements corresponding to the request
    # @return [Integer]
    attr_accessor :total_records

    # True if it is the first page, false otherwise
    # @return [TrueClass | FalseClass]
    attr_accessor :is_first_page

    # True if it is the last page, false, otherwise.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_last_page

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['request_id'] = 'RequestId'
      @_hash['status'] = 'Status'
      @_hash['data'] = 'Data'
      @_hash['page_size'] = 'PageSize'
      @_hash['page'] = 'Page'
      @_hash['total_pages'] = 'TotalPages'
      @_hash['total_records'] = 'TotalRecords'
      @_hash['is_first_page'] = 'IsFirstPage'
      @_hash['is_last_page'] = 'IsLastPage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        request_id
        status
        data
        page_size
        page
        total_pages
        total_records
        is_first_page
        is_last_page
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(request_id = SKIP,
                   status = SKIP,
                   data = SKIP,
                   page_size = SKIP,
                   page = SKIP,
                   total_pages = SKIP,
                   total_records = SKIP,
                   is_first_page = SKIP,
                   is_last_page = SKIP)
      @request_id = request_id unless request_id == SKIP
      @status = status unless status == SKIP
      @data = data unless data == SKIP
      @page_size = page_size unless page_size == SKIP
      @page = page unless page == SKIP
      @total_pages = total_pages unless total_pages == SKIP
      @total_records = total_records unless total_records == SKIP
      @is_first_page = is_first_page unless is_first_page == SKIP
      @is_last_page = is_last_page unless is_last_page == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      # Parameter is an array, so we need to iterate through it
      data = nil
      unless hash['Data'].nil?
        data = []
        hash['Data'].each do |structure|
          data << (EIDDocument.from_hash(structure) if structure)
        end
      end

      data = SKIP unless hash.key?('Data')
      page_size = hash.key?('PageSize') ? hash['PageSize'] : SKIP
      page = hash.key?('Page') ? hash['Page'] : SKIP
      total_pages = hash.key?('TotalPages') ? hash['TotalPages'] : SKIP
      total_records = hash.key?('TotalRecords') ? hash['TotalRecords'] : SKIP
      is_first_page = hash.key?('IsFirstPage') ? hash['IsFirstPage'] : SKIP
      is_last_page = hash.key?('IsLastPage') ? hash['IsLastPage'] : SKIP

      # Create object from extracted values.
      EIDDocumentResponse.new(request_id,
                              status,
                              data,
                              page_size,
                              page,
                              total_pages,
                              total_records,
                              is_first_page,
                              is_last_page)
    end
  end
end
