# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # Tier Model.
  class Tier < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The price list if reference price is list price.
    # Only used when the Price Rule category is set to.
    # ‘Tiered Pricing’.
    # @return [Integer]
    attr_accessor :tier_price_list_id

    # Price list description of the tier.
    # @return [String]
    attr_accessor :price_list_description

    # Minimum tier volume
    # E.g., 500
    # @return [Integer]
    attr_accessor :tier_min

    # Maximum tier volume
    # E.g., 1000
    # @return [Integer]
    attr_accessor :tier_max

    # Pricing group name of tier
    # @return [String]
    attr_accessor :tiered_pricing_group_name

    # Tiered pricing group period.
    # Possible Values
    # 1.	Monthly
    # 2.	Quarterly
    # 3.	Semi Annually
    # 4.	Annual
    # @return [String]
    attr_accessor :tiered_pricing_group_period

    # Discount value to be applied to the List price or pump price.
    # @return [Float]
    attr_accessor :discount_value

    # Price per unit after discount 
    # Note: This field will not contain any value for discounts on retail
    # prices.
    # @return [Float]
    attr_accessor :price_per_unit

    # Price per unit (List Price) 
    # Note: This field will not contain any value for discounts on retail
    # prices.
    # @return [Float]
    attr_accessor :price_per_unit_after_discount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tier_price_list_id'] = 'TierPriceListId'
      @_hash['price_list_description'] = 'PriceListDescription'
      @_hash['tier_min'] = 'TierMin'
      @_hash['tier_max'] = 'TierMax'
      @_hash['tiered_pricing_group_name'] = 'TieredPricingGroupName'
      @_hash['tiered_pricing_group_period'] = 'TieredPricingGroupPeriod'
      @_hash['discount_value'] = 'DiscountValue'
      @_hash['price_per_unit'] = 'PricePerUnit'
      @_hash['price_per_unit_after_discount'] = 'PricePerUnitAfterDiscount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tier_price_list_id
        price_list_description
        tier_min
        tier_max
        tiered_pricing_group_name
        tiered_pricing_group_period
        discount_value
        price_per_unit
        price_per_unit_after_discount
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        tier_price_list_id
        price_list_description
        tier_min
        tier_max
        tiered_pricing_group_name
        tiered_pricing_group_period
        discount_value
        price_per_unit
        price_per_unit_after_discount
      ]
    end

    def initialize(tier_price_list_id = SKIP,
                   price_list_description = SKIP,
                   tier_min = SKIP,
                   tier_max = SKIP,
                   tiered_pricing_group_name = SKIP,
                   tiered_pricing_group_period = SKIP,
                   discount_value = SKIP,
                   price_per_unit = SKIP,
                   price_per_unit_after_discount = SKIP)
      @tier_price_list_id = tier_price_list_id unless tier_price_list_id == SKIP
      @price_list_description = price_list_description unless price_list_description == SKIP
      @tier_min = tier_min unless tier_min == SKIP
      @tier_max = tier_max unless tier_max == SKIP
      unless tiered_pricing_group_name == SKIP
        @tiered_pricing_group_name =
          tiered_pricing_group_name
      end
      unless tiered_pricing_group_period == SKIP
        @tiered_pricing_group_period =
          tiered_pricing_group_period
      end
      @discount_value = discount_value unless discount_value == SKIP
      @price_per_unit = price_per_unit unless price_per_unit == SKIP
      unless price_per_unit_after_discount == SKIP
        @price_per_unit_after_discount =
          price_per_unit_after_discount
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tier_price_list_id =
        hash.key?('TierPriceListId') ? hash['TierPriceListId'] : SKIP
      price_list_description =
        hash.key?('PriceListDescription') ? hash['PriceListDescription'] : SKIP
      tier_min = hash.key?('TierMin') ? hash['TierMin'] : SKIP
      tier_max = hash.key?('TierMax') ? hash['TierMax'] : SKIP
      tiered_pricing_group_name =
        hash.key?('TieredPricingGroupName') ? hash['TieredPricingGroupName'] : SKIP
      tiered_pricing_group_period =
        hash.key?('TieredPricingGroupPeriod') ? hash['TieredPricingGroupPeriod'] : SKIP
      discount_value = hash.key?('DiscountValue') ? hash['DiscountValue'] : SKIP
      price_per_unit = hash.key?('PricePerUnit') ? hash['PricePerUnit'] : SKIP
      price_per_unit_after_discount =
        hash.key?('PricePerUnitAfterDiscount') ? hash['PricePerUnitAfterDiscount'] : SKIP

      # Create object from extracted values.
      Tier.new(tier_price_list_id,
               price_list_description,
               tier_min,
               tier_max,
               tiered_pricing_group_name,
               tiered_pricing_group_period,
               discount_value,
               price_per_unit,
               price_per_unit_after_discount)
    end
  end
end
