# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # SearchStatementOfAccount Model.
  class SearchStatementOfAccount < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Statement of account identifier
    # @return [Integer]
    attr_accessor :statement_of_account_id

    # Statement of account reference
    # @return [String]
    attr_accessor :so_a_reference_number

    # Date on which the SOA was generated.
    # Format: yyyyMMdd
    # @return [String]
    attr_accessor :statement_date

    # Payment customer id of the customer.
    # @return [Integer]
    attr_accessor :payer_id

    # Payment customer number.
    # @return [String]
    attr_accessor :payer_number

    # Invoiced amount and due for payment
    # @return [Float]
    attr_accessor :amount_due

    # Invoiced amount and overdue for payment.
    # @return [Float]
    attr_accessor :amount_overdue

    # ISO code of SOA currency.
    # @return [String]
    attr_accessor :currency_code

    # Symbol of SOA currency. 
    # Example: €
    # @return [String]
    attr_accessor :currency_symbol

    # Due date for payment. Format: yyyyMMdd
    # Note: 
    # •	Clients to convert this to appropriate DateTime type.
    # •	SoA due date is considered as the latest due date of the invoices within
    # the SoA
    # @return [String]
    attr_accessor :due_date

    # ISO code of the country i.e., UK, DE, MY, etc.
    # This is the value of the first invoice within the SoA. It may not be same
    # for all the invoices within the SoA.
    # @return [String]
    attr_accessor :invoiced_on_behalf_of

    # Status of the document. Valid values –
    # 1.	Paid – Fully paid all Invoices with in the SOA.
    # 2.	Overdue – At least one invoice payment due date is less than current
    # date with in the SOA.
    # 3.	Due – At least one invoice is due for payment and is within the due
    # date. There is no invoice overdue for payment.
    # @return [String]
    attr_accessor :status

    # Total gross amount in customer currency.
    # @return [Float]
    attr_accessor :gross_amount_customer_currency

    # Document reference number fetched
    # @return [String]
    attr_accessor :document_reference_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['statement_of_account_id'] = 'StatementOfAccountId'
      @_hash['so_a_reference_number'] = 'SoAReferenceNumber'
      @_hash['statement_date'] = 'StatementDate'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['amount_due'] = 'AmountDue'
      @_hash['amount_overdue'] = 'AmountOverdue'
      @_hash['currency_code'] = 'CurrencyCode'
      @_hash['currency_symbol'] = 'CurrencySymbol'
      @_hash['due_date'] = 'DueDate'
      @_hash['invoiced_on_behalf_of'] = 'InvoicedOnBehalfOf'
      @_hash['status'] = 'Status'
      @_hash['gross_amount_customer_currency'] = 'GrossAmountCustomerCurrency'
      @_hash['document_reference_number'] = 'DocumentReferenceNumber'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        statement_of_account_id
        so_a_reference_number
        statement_date
        payer_id
        payer_number
        amount_due
        amount_overdue
        currency_code
        currency_symbol
        due_date
        invoiced_on_behalf_of
        status
        gross_amount_customer_currency
        document_reference_number
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        statement_of_account_id
        so_a_reference_number
        statement_date
        payer_id
        payer_number
        amount_due
        amount_overdue
        currency_code
        currency_symbol
        due_date
        invoiced_on_behalf_of
        status
        gross_amount_customer_currency
        document_reference_number
      ]
    end

    def initialize(statement_of_account_id = SKIP,
                   so_a_reference_number = SKIP,
                   statement_date = SKIP,
                   payer_id = SKIP,
                   payer_number = SKIP,
                   amount_due = SKIP,
                   amount_overdue = SKIP,
                   currency_code = SKIP,
                   currency_symbol = SKIP,
                   due_date = SKIP,
                   invoiced_on_behalf_of = SKIP,
                   status = SKIP,
                   gross_amount_customer_currency = SKIP,
                   document_reference_number = SKIP)
      @statement_of_account_id = statement_of_account_id unless statement_of_account_id == SKIP
      @so_a_reference_number = so_a_reference_number unless so_a_reference_number == SKIP
      @statement_date = statement_date unless statement_date == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @amount_due = amount_due unless amount_due == SKIP
      @amount_overdue = amount_overdue unless amount_overdue == SKIP
      @currency_code = currency_code unless currency_code == SKIP
      @currency_symbol = currency_symbol unless currency_symbol == SKIP
      @due_date = due_date unless due_date == SKIP
      @invoiced_on_behalf_of = invoiced_on_behalf_of unless invoiced_on_behalf_of == SKIP
      @status = status unless status == SKIP
      unless gross_amount_customer_currency == SKIP
        @gross_amount_customer_currency =
          gross_amount_customer_currency
      end
      unless document_reference_number == SKIP
        @document_reference_number =
          document_reference_number
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      statement_of_account_id =
        hash.key?('StatementOfAccountId') ? hash['StatementOfAccountId'] : SKIP
      so_a_reference_number =
        hash.key?('SoAReferenceNumber') ? hash['SoAReferenceNumber'] : SKIP
      statement_date = hash.key?('StatementDate') ? hash['StatementDate'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      amount_due = hash.key?('AmountDue') ? hash['AmountDue'] : SKIP
      amount_overdue = hash.key?('AmountOverdue') ? hash['AmountOverdue'] : SKIP
      currency_code = hash.key?('CurrencyCode') ? hash['CurrencyCode'] : SKIP
      currency_symbol =
        hash.key?('CurrencySymbol') ? hash['CurrencySymbol'] : SKIP
      due_date = hash.key?('DueDate') ? hash['DueDate'] : SKIP
      invoiced_on_behalf_of =
        hash.key?('InvoicedOnBehalfOf') ? hash['InvoicedOnBehalfOf'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      gross_amount_customer_currency =
        hash.key?('GrossAmountCustomerCurrency') ? hash['GrossAmountCustomerCurrency'] : SKIP
      document_reference_number =
        hash.key?('DocumentReferenceNumber') ? hash['DocumentReferenceNumber'] : SKIP

      # Create object from extracted values.
      SearchStatementOfAccount.new(statement_of_account_id,
                                   so_a_reference_number,
                                   statement_date,
                                   payer_id,
                                   payer_number,
                                   amount_due,
                                   amount_overdue,
                                   currency_code,
                                   currency_symbol,
                                   due_date,
                                   invoiced_on_behalf_of,
                                   status,
                                   gross_amount_customer_currency,
                                   document_reference_number)
    end
  end
end
