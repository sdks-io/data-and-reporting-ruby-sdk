# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # PricingHistory Model.
  class PricingHistory < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Pricing History Period Start date and should be the first date of the
    # month.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :from_date

    # Pricing History Period end date and should be the last date of the period
    # month.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :to_date

    # Pricing History Period Fees Rule ID that is associated to the period of
    # that associated payer.  
    # Example: 8101
    # @return [Integer]
    attr_accessor :fees_rule_id

    # Pricing History Period Fees Rule Description that is associated to the
    # period of that associated payer.
    # @return [String]
    attr_accessor :fees_rule_description

    # Total Quantity for the Pricing History Period that is associated to that
    # payer.
    # @return [Float]
    attr_accessor :total_volume

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['from_date'] = 'FromDate'
      @_hash['to_date'] = 'ToDate'
      @_hash['fees_rule_id'] = 'FeesRuleID'
      @_hash['fees_rule_description'] = 'FeesRuleDescription'
      @_hash['total_volume'] = 'TotalVolume'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        from_date
        to_date
        fees_rule_id
        fees_rule_description
        total_volume
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        from_date
        to_date
        fees_rule_id
        fees_rule_description
        total_volume
      ]
    end

    def initialize(from_date = SKIP,
                   to_date = SKIP,
                   fees_rule_id = SKIP,
                   fees_rule_description = SKIP,
                   total_volume = SKIP)
      @from_date = from_date unless from_date == SKIP
      @to_date = to_date unless to_date == SKIP
      @fees_rule_id = fees_rule_id unless fees_rule_id == SKIP
      @fees_rule_description = fees_rule_description unless fees_rule_description == SKIP
      @total_volume = total_volume unless total_volume == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      from_date = hash.key?('FromDate') ? hash['FromDate'] : SKIP
      to_date = hash.key?('ToDate') ? hash['ToDate'] : SKIP
      fees_rule_id = hash.key?('FeesRuleID') ? hash['FeesRuleID'] : SKIP
      fees_rule_description =
        hash.key?('FeesRuleDescription') ? hash['FeesRuleDescription'] : SKIP
      total_volume = hash.key?('TotalVolume') ? hash['TotalVolume'] : SKIP

      # Create object from extracted values.
      PricingHistory.new(from_date,
                         to_date,
                         fees_rule_id,
                         fees_rule_description,
                         total_volume)
    end
  end
end
