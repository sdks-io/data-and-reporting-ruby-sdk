# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # CurrentVolume Model.
  class CurrentVolume < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Bonus or association bonus configuration identifier that is associated to
    # the payer
    # @return [Integer]
    attr_accessor :fee_rule_id

    # Bonus or association bonus configuration description that is associated to
    # the payer.
    # @return [String]
    attr_accessor :fee_rule_description

    # Consumption(Volume) of the month.
    # @return [Integer]
    attr_accessor :month

    # Consumption (Volume) of the year.
    # @return [String]
    attr_accessor :year

    # Total volume consumption for the month/year above.
    # @return [Float]
    attr_accessor :total_volume

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['fee_rule_id'] = 'FeeRuleId'
      @_hash['fee_rule_description'] = 'FeeRuleDescription'
      @_hash['month'] = 'Month'
      @_hash['year'] = 'Year'
      @_hash['total_volume'] = 'TotalVolume'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        fee_rule_id
        fee_rule_description
        month
        year
        total_volume
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        fee_rule_id
        fee_rule_description
        month
        year
        total_volume
      ]
    end

    def initialize(fee_rule_id = SKIP, fee_rule_description = SKIP,
                   month = SKIP, year = SKIP, total_volume = SKIP)
      @fee_rule_id = fee_rule_id unless fee_rule_id == SKIP
      @fee_rule_description = fee_rule_description unless fee_rule_description == SKIP
      @month = month unless month == SKIP
      @year = year unless year == SKIP
      @total_volume = total_volume unless total_volume == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      fee_rule_id = hash.key?('FeeRuleId') ? hash['FeeRuleId'] : SKIP
      fee_rule_description =
        hash.key?('FeeRuleDescription') ? hash['FeeRuleDescription'] : SKIP
      month = hash.key?('Month') ? hash['Month'] : SKIP
      year = hash.key?('Year') ? hash['Year'] : SKIP
      total_volume = hash.key?('TotalVolume') ? hash['TotalVolume'] : SKIP

      # Create object from extracted values.
      CurrentVolume.new(fee_rule_id,
                        fee_rule_description,
                        month,
                        year,
                        total_volume)
    end
  end
end
