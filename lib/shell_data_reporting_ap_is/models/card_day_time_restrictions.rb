# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # CardDayTimeRestrictions Model.
  class CardDayTimeRestrictions < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Describes at which level the restriction is set at.
    # Possible values:
    # OU = Restriction set at ColCo card type 
    # Customer = Restriction set at customer card type
    # @return [String]
    attr_accessor :level

    # Whether the transaction is allowed on Mondays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :monday

    # Whether the transaction is allowed on Tuesdays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :tuesday

    # Whether the transaction is allowed on Wednesdays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :wednesday

    # Whether the transaction is allowed on Thursdays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :thursday

    # Whether the transaction is allowed on Fridays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :friday

    # Whether the transaction is allowed on Saturdays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :saturday

    # Whether the transaction is allowed on Sundays or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :sunday

    # The time in the day from when the transaction is allowed.
    # Format: HH:mm: ss
    # E.g., 21:00:00
    # Note: 
    # 1) The client application has to convert the value to the required
    # date-time data type.
    # 2) The value will be 00:00:00 when no restriction set for this field.
    # @return [String]
    attr_accessor :time_from

    # allowed.
    # Format: HH:mm: ss
    # E.g., 21:00:00
    # Note: 
    # 1) The client application has to convert the value to the required
    # date-time data type.
    # 2) The value will be 00:00:00 when no restriction set for this field.
    # @return [String]
    attr_accessor :time_to

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['level'] = 'Level'
      @_hash['monday'] = 'Monday'
      @_hash['tuesday'] = 'Tuesday'
      @_hash['wednesday'] = 'Wednesday'
      @_hash['thursday'] = 'Thursday'
      @_hash['friday'] = 'Friday'
      @_hash['saturday'] = 'Saturday'
      @_hash['sunday'] = 'Sunday'
      @_hash['time_from'] = 'TimeFrom'
      @_hash['time_to'] = 'TimeTo'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        level
        monday
        tuesday
        wednesday
        thursday
        friday
        saturday
        sunday
        time_from
        time_to
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        level
        time_from
        time_to
      ]
    end

    def initialize(level = SKIP,
                   monday = SKIP,
                   tuesday = SKIP,
                   wednesday = SKIP,
                   thursday = SKIP,
                   friday = SKIP,
                   saturday = SKIP,
                   sunday = SKIP,
                   time_from = SKIP,
                   time_to = SKIP)
      @level = level unless level == SKIP
      @monday = monday unless monday == SKIP
      @tuesday = tuesday unless tuesday == SKIP
      @wednesday = wednesday unless wednesday == SKIP
      @thursday = thursday unless thursday == SKIP
      @friday = friday unless friday == SKIP
      @saturday = saturday unless saturday == SKIP
      @sunday = sunday unless sunday == SKIP
      @time_from = time_from unless time_from == SKIP
      @time_to = time_to unless time_to == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      level = hash.key?('Level') ? hash['Level'] : SKIP
      monday = hash.key?('Monday') ? hash['Monday'] : SKIP
      tuesday = hash.key?('Tuesday') ? hash['Tuesday'] : SKIP
      wednesday = hash.key?('Wednesday') ? hash['Wednesday'] : SKIP
      thursday = hash.key?('Thursday') ? hash['Thursday'] : SKIP
      friday = hash.key?('Friday') ? hash['Friday'] : SKIP
      saturday = hash.key?('Saturday') ? hash['Saturday'] : SKIP
      sunday = hash.key?('Sunday') ? hash['Sunday'] : SKIP
      time_from = hash.key?('TimeFrom') ? hash['TimeFrom'] : SKIP
      time_to = hash.key?('TimeTo') ? hash['TimeTo'] : SKIP

      # Create object from extracted values.
      CardDayTimeRestrictions.new(level,
                                  monday,
                                  tuesday,
                                  wednesday,
                                  thursday,
                                  friday,
                                  saturday,
                                  sunday,
                                  time_from,
                                  time_to)
    end
  end
end
