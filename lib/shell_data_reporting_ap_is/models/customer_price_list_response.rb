# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # CustomerPriceListResponse Model.
  class CustomerPriceListResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # UUID (according to RFC 4122 standards) for requests and responses. This
    # will be played back in the response from the request.
    # @return [String]
    attr_accessor :request_id

    # UUID (according to RFC 4122 standards) for requests and responses. This
    # will be played back in the response from the request.
    # @return [Array[PriceList]]
    attr_accessor :price_list

    # UUID (according to RFC 4122 standards) for requests and responses. This
    # will be played back in the response from the request.
    # @return [ErrorStatus]
    attr_accessor :error

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['request_id'] = 'RequestId'
      @_hash['price_list'] = 'PriceList'
      @_hash['error'] = 'Error'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        request_id
        price_list
        error
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(request_id = SKIP, price_list = SKIP, error = SKIP)
      @request_id = request_id unless request_id == SKIP
      @price_list = price_list unless price_list == SKIP
      @error = error unless error == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      price_list = nil
      unless hash['PriceList'].nil?
        price_list = []
        hash['PriceList'].each do |structure|
          price_list << (PriceList.from_hash(structure) if structure)
        end
      end

      price_list = SKIP unless hash.key?('PriceList')
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']

      # Create object from extracted values.
      CustomerPriceListResponse.new(request_id,
                                    price_list,
                                    error)
    end
  end
end
