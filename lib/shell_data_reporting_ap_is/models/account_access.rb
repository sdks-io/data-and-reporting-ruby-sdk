# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # AccountAccess Model.
  class AccountAccess < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting company id.
    # @return [Integer]
    attr_accessor :colco_id

    # Collecting company code.
    # @return [Integer]
    attr_accessor :colco_code

    # Payer Id to which the user has access
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number to which the user has access
    # @return [String]
    attr_accessor :payer_number

    # Name of the Payer to which the user has access
    # @return [String]
    attr_accessor :payer_name

    # Account Id to which the user has access
    # @return [Integer]
    attr_accessor :account_id

    # Account Number to which the user has access
    # @return [String]
    attr_accessor :account_number

    # Name of the Account to which the user has access
    # @return [String]
    attr_accessor :account_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['colco_id'] = 'ColcoId'
      @_hash['colco_code'] = 'ColcoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['payer_name'] = 'PayerName'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['account_name'] = 'AccountName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        colco_id
        colco_code
        payer_id
        payer_number
        payer_name
        account_id
        account_number
        account_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        colco_id
        colco_code
        payer_id
        payer_number
        payer_name
        account_id
        account_name
      ]
    end

    def initialize(colco_id = SKIP, colco_code = SKIP, payer_id = SKIP,
                   payer_number = SKIP, payer_name = SKIP, account_id = SKIP,
                   account_number = SKIP, account_name = SKIP)
      @colco_id = colco_id unless colco_id == SKIP
      @colco_code = colco_code unless colco_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @payer_name = payer_name unless payer_name == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @account_name = account_name unless account_name == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      colco_id = hash.key?('ColcoId') ? hash['ColcoId'] : SKIP
      colco_code = hash.key?('ColcoCode') ? hash['ColcoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      payer_name = hash.key?('PayerName') ? hash['PayerName'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      account_name = hash.key?('AccountName') ? hash['AccountName'] : SKIP

      # Create object from extracted values.
      AccountAccess.new(colco_id,
                        colco_code,
                        payer_id,
                        payer_number,
                        payer_name,
                        account_id,
                        account_number,
                        account_name)
    end
  end
end
