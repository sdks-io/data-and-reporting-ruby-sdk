# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # SearchSOAReq Model.
  class SearchSOAReq < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Code of the selected payer.
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory.
    # @return [String]
    attr_accessor :payer_number

    # Invoice number.
    # Optional.
    # This input is a search criterion, if given.
    # @return [String]
    attr_accessor :invoice_number

    # SOA searched from this date.
    # Optional.
    # This input is a search criterion, if given.
    # Date format: yyyy/MM/dd
    # @return [String]
    attr_accessor :from_date

    # Invoice date searched until this date.
    # Optional.
    # This input is a search criterion, if given.
    # @return [String]
    attr_accessor :to_date

    # Invoice date search period. Valid values -
    # Last 7 days – Issued in last 7 days.
    # Last 30 days – Issued in last 30 days.
    # Last 90 days – Issued in last 90 days.
    # Optional.
    # This input is a search criterion, if given.
    # @return [Integer]
    attr_accessor :period

    # Date of invoicing.
    # Optional.
    # This input is a search criterion, if given.
    # @return [String]
    attr_accessor :invoice_date

    # Possible options are:
    # 1.    StatementDate ASC
    # 2.    StatementDate DESC
    # Optional
    # Note:
    # This option uses a column name with a combination of “ASC or DESC” for
    # sorting.
    # If only the column name is provided, it is sorted by ascending. 
    # Sorting is allowed only ASC or DESC, If both provided in the input ASC
    # will be taken as precedence.
    # @return [Array[String]]
    attr_accessor :invoice_status

    # Possible options are:
    # 1.    StatementDate ASC
    # 2.    StatementDate DESC
    # Optional
    # Note:
    # This option uses a column name with a combination of “ASC or DESC” for
    # sorting.
    # If only the column name is provided, it is sorted by ascending. 
    # Sorting is allowed only ASC or DESC, If both provided in the input ASC
    # will be taken as precedence.
    # @return [Array[Integer]]
    attr_accessor :sort_by

    # Collecting Company Id  of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1-Philippines
    # 5-UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Payer Id  of the selected payer.
    # @return [Integer]
    attr_accessor :payer_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['invoice_number'] = 'InvoiceNumber'
      @_hash['from_date'] = 'FromDate'
      @_hash['to_date'] = 'ToDate'
      @_hash['period'] = 'Period'
      @_hash['invoice_date'] = 'InvoiceDate'
      @_hash['invoice_status'] = 'InvoiceStatus'
      @_hash['sort_by'] = 'SortBy'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['payer_id'] = 'PayerId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_code
        payer_number
        invoice_number
        from_date
        to_date
        period
        invoice_date
        invoice_status
        sort_by
        col_co_id
        payer_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_code
        payer_number
        invoice_number
        from_date
        to_date
        period
        invoice_date
        col_co_id
        payer_id
      ]
    end

    def initialize(col_co_code = SKIP,
                   payer_number = SKIP,
                   invoice_number = SKIP,
                   from_date = SKIP,
                   to_date = SKIP,
                   period = SKIP,
                   invoice_date = SKIP,
                   invoice_status = SKIP,
                   sort_by = SKIP,
                   col_co_id = SKIP,
                   payer_id = SKIP)
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @invoice_number = invoice_number unless invoice_number == SKIP
      @from_date = from_date unless from_date == SKIP
      @to_date = to_date unless to_date == SKIP
      @period = period unless period == SKIP
      @invoice_date = invoice_date unless invoice_date == SKIP
      @invoice_status = invoice_status unless invoice_status == SKIP
      @sort_by = sort_by unless sort_by == SKIP
      @col_co_id = col_co_id unless col_co_id == SKIP
      @payer_id = payer_id unless payer_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      invoice_number = hash.key?('InvoiceNumber') ? hash['InvoiceNumber'] : SKIP
      from_date = hash.key?('FromDate') ? hash['FromDate'] : SKIP
      to_date = hash.key?('ToDate') ? hash['ToDate'] : SKIP
      period = hash.key?('Period') ? hash['Period'] : SKIP
      invoice_date = hash.key?('InvoiceDate') ? hash['InvoiceDate'] : SKIP
      invoice_status = hash.key?('InvoiceStatus') ? hash['InvoiceStatus'] : SKIP
      sort_by = hash.key?('SortBy') ? hash['SortBy'] : SKIP
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP

      # Create object from extracted values.
      SearchSOAReq.new(col_co_code,
                       payer_number,
                       invoice_number,
                       from_date,
                       to_date,
                       period,
                       invoice_date,
                       invoice_status,
                       sort_by,
                       col_co_id,
                       payer_id)
    end
  end
end
