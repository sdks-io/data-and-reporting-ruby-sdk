# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # VolumeBasedBonusResponse Model.
  class VolumeBasedBonusResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Array[BonusConfiguration]]
    attr_accessor :configuration

    # TODO: Write general description for this method
    # @return [Array[CurrentVolume]]
    attr_accessor :current_period_consumption

    # TODO: Write general description for this method
    # @return [Array[BonusHistory]]
    attr_accessor :historical_bonus_paid

    # TODO: Write general description for this method
    # @return [ErrorStatus]
    attr_accessor :error

    # API Request Id
    # @return [String]
    attr_accessor :request_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['configuration'] = 'Configuration'
      @_hash['current_period_consumption'] = 'CurrentPeriodConsumption'
      @_hash['historical_bonus_paid'] = 'HistoricalBonusPaid'
      @_hash['error'] = 'Error'
      @_hash['request_id'] = 'RequestId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        configuration
        current_period_consumption
        historical_bonus_paid
        error
        request_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(configuration = SKIP, current_period_consumption = SKIP,
                   historical_bonus_paid = SKIP, error = SKIP,
                   request_id = SKIP)
      @configuration = configuration unless configuration == SKIP
      unless current_period_consumption == SKIP
        @current_period_consumption =
          current_period_consumption
      end
      @historical_bonus_paid = historical_bonus_paid unless historical_bonus_paid == SKIP
      @error = error unless error == SKIP
      @request_id = request_id unless request_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      configuration = nil
      unless hash['Configuration'].nil?
        configuration = []
        hash['Configuration'].each do |structure|
          configuration << (BonusConfiguration.from_hash(structure) if structure)
        end
      end

      configuration = SKIP unless hash.key?('Configuration')
      # Parameter is an array, so we need to iterate through it
      current_period_consumption = nil
      unless hash['CurrentPeriodConsumption'].nil?
        current_period_consumption = []
        hash['CurrentPeriodConsumption'].each do |structure|
          current_period_consumption << (CurrentVolume.from_hash(structure) if structure)
        end
      end

      current_period_consumption = SKIP unless hash.key?('CurrentPeriodConsumption')
      # Parameter is an array, so we need to iterate through it
      historical_bonus_paid = nil
      unless hash['HistoricalBonusPaid'].nil?
        historical_bonus_paid = []
        hash['HistoricalBonusPaid'].each do |structure|
          historical_bonus_paid << (BonusHistory.from_hash(structure) if structure)
        end
      end

      historical_bonus_paid = SKIP unless hash.key?('HistoricalBonusPaid')
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP

      # Create object from extracted values.
      VolumeBasedBonusResponse.new(configuration,
                                   current_period_consumption,
                                   historical_bonus_paid,
                                   error,
                                   request_id)
    end
  end
end
