# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  # List of payments made by the customer after the latest Statement of Account.
  # Note: All the payments made by the customer will be returned when there is
  # no Statement of Account available for customer.
  class PaymentsSinceLastSOA < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account Identifier for which payment is made. 
    # Example: 12345
    # @return [Integer]
    attr_accessor :account_id

    # Account number for which payment is made. 
    # Example: GB000000123
    # @return [String]
    attr_accessor :account_number

    # Account Short Name
    # Example: GB Earth Movers-SN
    # @return [String]
    attr_accessor :account_short_name

    # Summary billing document reference id.
    # Example: 2
    # @return [Integer]
    attr_accessor :summary_document_id

    # Summary billing document reference number.
    # @return [String]
    attr_accessor :summary_document_number

    # Summary billing document date. 
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :summary_document_date

    # Payment due date of the Summary billing document. 
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :summary_document_payment_due_date

    # Total value in the Summary billing document.
    # @return [Float]
    attr_accessor :summary_document_total_value

    # Total VAT in the Summary billing document.
    # @return [Float]
    attr_accessor :summary_document_total_vat

    # Total DD amount in the Summary billing document.
    # @return [Float]
    attr_accessor :summary_document_dd_amount

    # Date of payment.
    # Format: YYYYMMDD
    # @return [String]
    attr_accessor :payment_date

    # Reference text of the payment.
    # @return [String]
    attr_accessor :payment_reference

    # ISO code of payment currency. 
    # Example: EUR
    # @return [String]
    attr_accessor :payment_currency_code

    # Symbol of payment currency. 
    # Example: €
    # @return [String]
    attr_accessor :payment_currency_symbol

    # Amount paid.
    # @return [Float]
    attr_accessor :amount_paid

    # Balance amount to be settled for the Summary document.
    # @return [Float]
    attr_accessor :balance

    # True Payment.
    # @return [String]
    attr_accessor :true_payment

    # Balance in the pre-paid amount.
    # @return [Float]
    attr_accessor :prepaid_balance

    # Currency ISO code of the local country. It is derived based on CountryCode
    # from microservice configuration. This field is expected to have different
    # value than the previously mentioned field CurrencyCode, only in the case
    # of serviced OUs.
    # Example: EUR
    # @return [String]
    attr_accessor :local_currency_code

    # Currency Symbol of the local country. It is derived based on CountryCode
    # from microservice configuration. This field is expected to have different
    # value than the previously mentioned field CurrencySymbol, only in the case
    # of serviced OUs.
    # Example: €
    # @return [String]
    attr_accessor :local_currency_symbol

    # Exchange rate from Payment currency to local currency.
    # @return [String]
    attr_accessor :local_currency_exchange_rate

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['account_short_name'] = 'AccountShortName'
      @_hash['summary_document_id'] = 'SummaryDocumentId'
      @_hash['summary_document_number'] = 'SummaryDocumentNumber'
      @_hash['summary_document_date'] = 'SummaryDocumentDate'
      @_hash['summary_document_payment_due_date'] =
        'SummaryDocumentPaymentDueDate'
      @_hash['summary_document_total_value'] = 'SummaryDocumentTotalValue'
      @_hash['summary_document_total_vat'] = 'SummaryDocumentTotalVAT'
      @_hash['summary_document_dd_amount'] = 'SummaryDocumentDDAmount'
      @_hash['payment_date'] = 'PaymentDate'
      @_hash['payment_reference'] = 'PaymentReference'
      @_hash['payment_currency_code'] = 'PaymentCurrencyCode'
      @_hash['payment_currency_symbol'] = 'PaymentCurrencySymbol'
      @_hash['amount_paid'] = 'AmountPaid'
      @_hash['balance'] = 'Balance'
      @_hash['true_payment'] = 'TruePayment'
      @_hash['prepaid_balance'] = 'PrepaidBalance'
      @_hash['local_currency_code'] = 'LocalCurrencyCode'
      @_hash['local_currency_symbol'] = 'LocalCurrencySymbol'
      @_hash['local_currency_exchange_rate'] = 'LocalCurrencyExchangeRate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_id
        account_number
        account_short_name
        summary_document_id
        summary_document_number
        summary_document_date
        summary_document_payment_due_date
        summary_document_total_value
        summary_document_total_vat
        summary_document_dd_amount
        payment_date
        payment_reference
        payment_currency_code
        payment_currency_symbol
        amount_paid
        balance
        true_payment
        prepaid_balance
        local_currency_code
        local_currency_symbol
        local_currency_exchange_rate
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        account_id
        account_number
        account_short_name
        summary_document_id
        summary_document_number
        summary_document_date
        summary_document_payment_due_date
        summary_document_total_value
        summary_document_total_vat
        summary_document_dd_amount
        payment_date
        payment_reference
        payment_currency_code
        payment_currency_symbol
        amount_paid
        balance
        true_payment
        prepaid_balance
        local_currency_code
        local_currency_symbol
        local_currency_exchange_rate
      ]
    end

    def initialize(account_id = SKIP, account_number = SKIP,
                   account_short_name = SKIP, summary_document_id = SKIP,
                   summary_document_number = SKIP, summary_document_date = SKIP,
                   summary_document_payment_due_date = SKIP,
                   summary_document_total_value = SKIP,
                   summary_document_total_vat = SKIP,
                   summary_document_dd_amount = SKIP, payment_date = SKIP,
                   payment_reference = SKIP, payment_currency_code = SKIP,
                   payment_currency_symbol = SKIP, amount_paid = SKIP,
                   balance = SKIP, true_payment = SKIP, prepaid_balance = SKIP,
                   local_currency_code = SKIP, local_currency_symbol = SKIP,
                   local_currency_exchange_rate = SKIP)
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @account_short_name = account_short_name unless account_short_name == SKIP
      @summary_document_id = summary_document_id unless summary_document_id == SKIP
      @summary_document_number = summary_document_number unless summary_document_number == SKIP
      @summary_document_date = summary_document_date unless summary_document_date == SKIP
      unless summary_document_payment_due_date == SKIP
        @summary_document_payment_due_date =
          summary_document_payment_due_date
      end
      unless summary_document_total_value == SKIP
        @summary_document_total_value =
          summary_document_total_value
      end
      unless summary_document_total_vat == SKIP
        @summary_document_total_vat =
          summary_document_total_vat
      end
      unless summary_document_dd_amount == SKIP
        @summary_document_dd_amount =
          summary_document_dd_amount
      end
      @payment_date = payment_date unless payment_date == SKIP
      @payment_reference = payment_reference unless payment_reference == SKIP
      @payment_currency_code = payment_currency_code unless payment_currency_code == SKIP
      @payment_currency_symbol = payment_currency_symbol unless payment_currency_symbol == SKIP
      @amount_paid = amount_paid unless amount_paid == SKIP
      @balance = balance unless balance == SKIP
      @true_payment = true_payment unless true_payment == SKIP
      @prepaid_balance = prepaid_balance unless prepaid_balance == SKIP
      @local_currency_code = local_currency_code unless local_currency_code == SKIP
      @local_currency_symbol = local_currency_symbol unless local_currency_symbol == SKIP
      unless local_currency_exchange_rate == SKIP
        @local_currency_exchange_rate =
          local_currency_exchange_rate
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      account_short_name =
        hash.key?('AccountShortName') ? hash['AccountShortName'] : SKIP
      summary_document_id =
        hash.key?('SummaryDocumentId') ? hash['SummaryDocumentId'] : SKIP
      summary_document_number =
        hash.key?('SummaryDocumentNumber') ? hash['SummaryDocumentNumber'] : SKIP
      summary_document_date =
        hash.key?('SummaryDocumentDate') ? hash['SummaryDocumentDate'] : SKIP
      summary_document_payment_due_date =
        hash.key?('SummaryDocumentPaymentDueDate') ? hash['SummaryDocumentPaymentDueDate'] : SKIP
      summary_document_total_value =
        hash.key?('SummaryDocumentTotalValue') ? hash['SummaryDocumentTotalValue'] : SKIP
      summary_document_total_vat =
        hash.key?('SummaryDocumentTotalVAT') ? hash['SummaryDocumentTotalVAT'] : SKIP
      summary_document_dd_amount =
        hash.key?('SummaryDocumentDDAmount') ? hash['SummaryDocumentDDAmount'] : SKIP
      payment_date = hash.key?('PaymentDate') ? hash['PaymentDate'] : SKIP
      payment_reference =
        hash.key?('PaymentReference') ? hash['PaymentReference'] : SKIP
      payment_currency_code =
        hash.key?('PaymentCurrencyCode') ? hash['PaymentCurrencyCode'] : SKIP
      payment_currency_symbol =
        hash.key?('PaymentCurrencySymbol') ? hash['PaymentCurrencySymbol'] : SKIP
      amount_paid = hash.key?('AmountPaid') ? hash['AmountPaid'] : SKIP
      balance = hash.key?('Balance') ? hash['Balance'] : SKIP
      true_payment = hash.key?('TruePayment') ? hash['TruePayment'] : SKIP
      prepaid_balance =
        hash.key?('PrepaidBalance') ? hash['PrepaidBalance'] : SKIP
      local_currency_code =
        hash.key?('LocalCurrencyCode') ? hash['LocalCurrencyCode'] : SKIP
      local_currency_symbol =
        hash.key?('LocalCurrencySymbol') ? hash['LocalCurrencySymbol'] : SKIP
      local_currency_exchange_rate =
        hash.key?('LocalCurrencyExchangeRate') ? hash['LocalCurrencyExchangeRate'] : SKIP

      # Create object from extracted values.
      PaymentsSinceLastSOA.new(account_id,
                               account_number,
                               account_short_name,
                               summary_document_id,
                               summary_document_number,
                               summary_document_date,
                               summary_document_payment_due_date,
                               summary_document_total_value,
                               summary_document_total_vat,
                               summary_document_dd_amount,
                               payment_date,
                               payment_reference,
                               payment_currency_code,
                               payment_currency_symbol,
                               amount_paid,
                               balance,
                               true_payment,
                               prepaid_balance,
                               local_currency_code,
                               local_currency_symbol,
                               local_currency_exchange_rate)
    end
  end
end
