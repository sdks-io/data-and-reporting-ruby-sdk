# shell_data_reporting_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellDataReportingApIs
  #  shell_data_reporting_ap_is client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Returns the configured authentication BearerToken instance.
    def bearer_token
      @auth_managers['BearerToken']
    end

    # Access to customer controller.
    # @return [CustomerController] Returns the controller instance.
    def customer
      @customer ||= CustomerController.new @global_configuration
    end

    # Access to transaction controller.
    # @return [TransactionController] Returns the controller instance.
    def transaction
      @transaction ||= TransactionController.new @global_configuration
    end

    # Access to invoice controller.
    # @return [InvoiceController] Returns the controller instance.
    def invoice
      @invoice ||= InvoiceController.new @global_configuration
    end

    # Access to o_auth_authorization controller.
    # @return [OAuthAuthorizationController] Returns the controller instance.
    def o_auth_authorization
      @o_auth_authorization ||= OAuthAuthorizationController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::SIT, basic_auth_credentials: nil,
      bearer_token_credentials: nil, config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    environment: environment,
                    basic_auth_credentials: basic_auth_credentials,
                    bearer_token_credentials: bearer_token_credentials
                  )
                else
                  config
                end

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[BasicAuth BearerToken].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['BasicAuth'] = BasicAuth.new(http_client_config.basic_auth_credentials)
      @auth_managers['BearerToken'] = BearerToken.new(http_client_config.bearer_token_credentials,
                                                      global_config)
    end
  end
end
